[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "This is a template for using quarto to create a course blog. A course blog can be used in many ways to engage with course content. For example, you could use the blog to post assignments, or to dive more deeply into course material that interests you. By the end of the course, your blog can serve as a portfolio of ways that you engaged in the material. By learning how to use quarto for your blog, you will also be learning new skills for creating and sharing reproducible documents that could be useful to you in the future.\nThe purpose of this page is to provide tips and pointers about blogging with quarto. Quarto is simple enough for creating a basic course blog. However, it is also very deep and can be used to create all sorts of documents, from website, to slide decks, and books.\n\n\nMany questions about quarto can be answered from the quarto documentation located at: https://quarto.org.\nIf you are looking for something specific and don’t know where to find it on the website, use the search tool in the top right corner.\n\n\n\n\nTo use this template you will need a Github.com account, and access to R and Rstudio.\nYou can get access by creating a Github.com account, and downloading the necessary open-source software to your machine.\nIt is also possible to use Rstudio in your web-browser, which does not require downloading any software. There are two sets of instructions, one for the downloading approach, and the other for using Rstudio cloud. Scroll to the bottom for instructions on using Rstudio cloud.\n\n\n\nIn order to use this template you will need to install some free open-source software on your computer.\n\nSign up for a free account at https://github.com. This a website for sharing open-source software, but it can also be used to serve your blog as a website for free.\nDownload Github Desktop and install it on your machine. This should install the version control software git on your system, and you can use Github Desktop to easily push your blog from your local computer so that it can be viewed on Github.com.\nDownload R and install it on your machine. R is a programming language capable of many things, and it needs to be on your machine before you can run R Studio.\nDownload R Studio Desktop and install it on your machine. R Studio is called an “IDE” or integrated development environment, that you can use to write your blog with quarto.\n\n\n\n\nOnce you have the software installed, the next step is to create a quarto blog project in R studio. The collection of files in this template is a pre-made quarto blog project that you can modify for your own purposes. You can also make one yourself in Rstudio.\nAssuming you have downloaded this template, and you have installed the above software, then you need to open quartoCourseBlog.Rproj.\n\n\n\n\nTo find out if everything is working, try rendering the blog. Go to the “Build” Tab and press “Render Website”.\n\nAfter the rendering is complete, you should be able to view your blog. It might show up in the viewer pane like this:\n\nAnd if you press the ‘window-with-an-arrow’ button, you can view the website in your default browser. Quarto websites automatically adjust for the size of the window, so it may appear differently in the viewer pane versus the browser.\n\n\n\nAll of the blog posts are located in the posts folder.\n\nTo make a new post, copy an existing post and then modify it. For example, my posts folder currently contains one post, and it is inside the my_first_post folder.\n\nI can copy the folder and make a new one with the same contents from the Rstudio gear-box menu:\n\nI made a folder for a second post called Example_assignment.\n\nThese are the two files inside the folder. The .qmd file is a plain text file where you will write the blog post. This folder can also be used to store other assets you might put in the post, such as pictures.\n\n\n\nTo write a new post, open the .qmd file, edit the text, and then re-render the website. This is what the text in the .qmd file looked like when I copied it.\n\nThe text at the top between the “---” is called YAML, and provides meta-data for your document. This is where you can change the title, date, name, and add keywords if you want.\nThe rest of the document is for the main body of the post. For example, I changed the text to read:\n\n\n\n\n\nRender the website from the build tab again to see your new post.\n\n\n\nTo share your blog online you will have to publish it on a server that can be accessed by other people on the internet. There are multiple ways to do this step, and I recommend using Github pages. You can view more in-depth instructions from quarto here https://quarto.org/docs/publishing/github-pages.html.\nHere are the steps:\n\nOpen Github Desktop\nGo to preferences and sign in to your Github.com account\n“Add” your blog project folder to Github Desktop\nThere should be an option for a commit message, write a note in there like “first commit”.\nPublish to github.com and uncheck private repository so that other people will be able to see your repository.\nYou should now be able to see your new repository in your github.com profile, which means you should be able to see a copy of your blog files in the repository.\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder.\nAccess the blog from the url generated by the github pages settings page.\n\n\n\n\nWhenever you make changes to your blog project that you want to share online follow these steps:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\n\n\nI am planning to add a video overview of these steps soon. In the meantime, these instructions may be enough to get started with R studio cloud and github.com.\n\nSign up for a free account with posit cloud here https://posit.cloud/plans/free\nSign up for a free https://github.com account.\nLog in to Github, and search for this repository https://github.com/CrumpLab/quartoCourseBlog.\n\n\nClick the green “Use this template” Button\nThis will make a copy of the template in your github account, it will show up as one of your repositories\nGive your new repository a name\n\n\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder. You should now be able to view the blog from the url given by github pages.\nLog into Posit Cloud\nCreate a New Project, choose “New Project from Git Repository”\n\n\nenter the URL to the github repository you just made\n\n\nLoad the project, and edit/modify the files (see above for examples of creating new posts etc.)\nTo send your changed files back to github.com you need to do a few steps\n\n\nFrom the Git tab: stage your changes, commit your changes, and push your changes using the green up arrow.\nYou will also need to authenticate your git credentials, and allow Rstudio cloud to update your github repository\nIn the terminal run these two lines, but replace with your name and email\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n\nWhen you “push” your changes back to Github using the green up arrow, you will be asked to enter a username and password. You can enter the username for your Github.com account, but your password won’t work. You need to set up a personal access token.\nGo to your github.com profile > settings page. Scroll down, click on “<> Developer Settings”, on the left\nClick on personal access tokens, generate a new token, give it repo access. Save the text somewhere and use it as your github password when pushing from RStudio.\n\n\nAt this point you should be able to work on your blog in Rstudio Cloud, and push your changes to have them updated on github.com, which serves your blog online.\n\n\n\n\nSee this growing list of quarto resources for much, much more:\nhttps://github.com/mcanouil/awesome-quarto"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noon’s Blog",
    "section": "",
    "text": "Basic Skills\n\n\n\n\n\n\n\nskills\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nLogic\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Import\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Visualization\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nUsing qmd Files\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nUsing qmd Files\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nWeek 2\n\n\n\n\n\n\n\ncourse\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nMy First post\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nExample assignment\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "“About” pages are special quarto template pages, with multiple options: https://quarto.org/docs/websites/website-about.html.\nTry changing the template type from jolla to one of the other options for a different look and feel."
  },
  {
    "objectID": "posts/my_first_post/index.html",
    "href": "posts/my_first_post/index.html",
    "title": "My First post",
    "section": "",
    "text": "Welcome to my blog!\nHere are some of my goals:\nAnd much more!"
  },
  {
    "objectID": "posts/my_first_post/index.html#an-introduction-to-me-and-my-interests",
    "href": "posts/my_first_post/index.html#an-introduction-to-me-and-my-interests",
    "title": "My First post",
    "section": "An Introduction to Me and My Interests",
    "text": "An Introduction to Me and My Interests\nI am a biology major with a minor in psychology, and I am planning to graduate in the coming December.\nI want to build a career in research, and right now I am most fascinated in neuroscience. All of my hands on lab work has been in that field, and it has been the most interesting experience working with different PI’s and graduate students on their projects for the last year.\nBesides academics I dabble in traditional art like drawing and painting, as well as some graphic design. I consider myself a literature enthusiast, and I read ALOT!\n“The future is an open book”\n\nThis spring semester I hope to create a reference to using RStudio for data visualization that can help other upcoming scientist like myself, and that I can go back to in a pinch."
  },
  {
    "objectID": "posts/My Notes/index.html",
    "href": "posts/My Notes/index.html",
    "title": "Week 2",
    "section": "",
    "text": "Here I will roughly draft some notes during class time, to be organized later.\nFEBRUARY 6th, 2023\nUsing GitHub: generally a public platform\nHow to commit changes to GitHub:\nMake changes on Posit>Render>Commit changes in GitHub and push.\nThis is for Github Desktop.\nThere is a way to do it on the browser when using Posit Cloud:\nGit tab>Commit>Push\nHow to get a preview of the website while staying in RStudio:\nTools>Global Options>R Markdown>Viewer pane\nIn the console: question mark before a function will open the help file for it.\nString means text anything in quotes ” ”\nTwo question marks will open any file with the function name in it\nTwo number with a colon in between will give a sequence (1:5) will give 1 2 3 4 5\nc() will make a list, separate the values by commas\n<- is an assignment of values to a name (which will show up in the environment)\nsample(x = 1:6, size = 10, replace = TRUE, prob = rep(1/6,6))\nx= the options to sample from\nsize= how many times to sample\nreplace= whether or not to exclude an option once it is sampled\nprob= probability of choosing each option"
  },
  {
    "objectID": "posts/Example_assignment/index.html",
    "href": "posts/Example_assignment/index.html",
    "title": "Example assignment",
    "section": "",
    "text": "This assignment engages you in the process of introspection. Your task is to use introspection to evaluate and describe your own mental imagery abilities. Attempt to answer the following kinds of questions. What is your mental imagery like? Do you have mental imagery for different kinds of senses? Is your mental imagery vivid and life-like or very different from normal perception? How would you describe your mental imagery?\nYou should write a minimum of 250 words, but feel free to write more. Submit your document on blackboard by the due date."
  },
  {
    "objectID": "posts/Example_assignment/index.html#my-mental-imagery",
    "href": "posts/Example_assignment/index.html#my-mental-imagery",
    "title": "Example assignment",
    "section": "My mental imagery",
    "text": "My mental imagery\nMy mental imagery is like…"
  },
  {
    "objectID": "posts/QMD Tips/index.html",
    "href": "posts/QMD Tips/index.html",
    "title": "Using qmd Files",
    "section": "",
    "text": "Here are a few things we should be able to do by the end of week 3:\n1. Be able to make a new .qmd document\nyou can either copy a post file and rename it\nor File>New Quarto Document> save as index.qmd in the posts folder\nor from the File tab in the viewer side of RStudio (without the top level IML that sets the parameters of the document like title/author/date)\n2. Be able to render a .qmd document\nfrom the source, from the build tab or from the console\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nThe visual view shows you the result of the formatting and how it would look in the website, while source view is just plain text with the markdown options\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document."
  },
  {
    "objectID": "posts/QMD Tips/index.html#header-2",
    "href": "posts/QMD Tips/index.html#header-2",
    "title": "Using qmd Files",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nunordered list\nsub item 1\nsub item 2\n\nTo insert an image :\n\n5. Be aware of resources to help you learn more about markdown options.\nMarkdwon basics on the CrumpLab website\nitalics and bold\nsuperscript2 / subscript2\nstrikethrough\nverbatim code\n6. Be able to insert an R code chunk, and show the output in the rendered document.\nwrite stuff\n\n\n\n\n1+1\n\n[1] 2\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nprint(\"a title\")\n\n[1] \"a title\"\n\ncat(\"and another title after it \\n like this\")\n\nand another title after it \n like this\n\n\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\nmacro for quick insert\n\nor use alt>command>i to automatically get the r block\n7. Running R code chunks in a qmd\n\npressing play\ncopy/paste into console\nhighlight then command-enter (mac)to run selection at a time\nprecedence issues (first to last)\n\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\n10. Write inline r code.\n11. Explain how the rendering environment is different from the Rstudio environment.\n12. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Data Visualization/index.html",
    "href": "posts/Data Visualization/index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Week Four: Data Visaulization\n\nData types: Show that you understand what is available to you in R. Note also, this goal overlaps with part of the midterm project. See the appendix on Data Types in the textbook for help. Write notes and R code chunks to demonstrate your knowledge\n\n\n# type of numeric data\ntypeof(10)\n\n[1] \"double\"\n\ntypeof(10.0)\n\n[1] \"double\"\n\ntypeof(10L)\n\n[1] \"integer\"\n\n# if you want to know if something is numeric (a double or an integer), you can use the function is.numeric() and it will tell you if it is numeric (TRUE) or not (FALSE).\nis.numeric(10L)\n\n[1] TRUE\n\nis.numeric(10.0)\n\n[1] TRUE\n\nis.numeric(\"Text\")\n\n[1] FALSE\n\n# Characters (also called “strings”) are any text between quotation marks.\ntypeof(\"This is a character string\")\n\n[1] \"character\"\n\ntypeof('You can use double or single quotes')\n\n[1] \"character\"\n\n# This can include quotes, but you have to escape quotes using a backslash to signal that the quote isn’t meant to be the end of the string.\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\n# cat() prints the arguments\n\ncat(my_string)\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n# Logical data (also sometimes called “Boolean” values) is one of two values: true or false. In R, we always write them in uppercase: TRUE and FALSE.\nclass(TRUE)\n\n[1] \"logical\"\n\nclass(FALSE)\n\n[1] \"logical\"\n\n\n\n# assign 1 to the object named a\na <- 1\nclass(a)\n\n[1] \"numeric\"\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\n# make a vector with a thing in it\na_thing <- 1\nanother_thing <- c(1,2)\nmany_things <- c(1:10)\n\n# these are all now objects in the environment\n\n\nTidy Data: Show that you understand what this means. Give an example of data this is in tidy format, and data that is not.\n\n\n# load ggplot2 and some sample datasets\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# the starwars data is loaded by tidyverse\n#assign the starwars dataset to a variable (object) name\nstarwars_copy<- starwars\n\n# check out some of the data types\nhead(starwars_copy)\n\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n\nclass(starwars_copy$name) \n\n[1] \"character\"\n\nclass(starwars_copy$height)\n\n[1] \"integer\"\n\nclass(starwars_copy$mass)\n\n[1] \"numeric\"\n\nstarwars_copy$sex\n\n [1] \"male\"           \"none\"           \"none\"           \"male\"          \n [5] \"female\"         \"male\"           \"female\"         \"none\"          \n [9] \"male\"           \"male\"           \"male\"           \"male\"          \n[13] \"male\"           \"male\"           \"male\"           \"hermaphroditic\"\n[17] \"male\"           \"male\"           \"male\"           \"male\"          \n[21] \"male\"           \"none\"           \"male\"           \"male\"          \n[25] \"male\"           \"male\"           \"female\"         \"male\"          \n[29] \"male\"           \"male\"           \"male\"           \"male\"          \n[33] \"male\"           \"male\"           \"male\"           \"male\"          \n[37] NA               \"male\"           \"male\"           NA              \n[41] \"female\"         \"male\"           \"male\"           \"female\"        \n[45] \"male\"           \"male\"           \"male\"           \"male\"          \n[49] \"male\"           \"male\"           \"male\"           \"female\"        \n[53] \"male\"           \"male\"           \"male\"           \"male\"          \n[57] \"male\"           \"female\"         \"male\"           \"male\"          \n[61] \"female\"         \"female\"         \"female\"         \"male\"          \n[65] \"male\"           \"male\"           \"female\"         \"male\"          \n[69] \"male\"           \"female\"         \"female\"         \"male\"          \n[73] \"none\"           \"male\"           \"male\"           \"female\"        \n[77] \"male\"           \"male\"           \"male\"           NA              \n[81] \"male\"           \"male\"           \"female\"         \"male\"          \n[85] \"none\"           NA               \"female\"        \n\nis.numeric(starwars$name)\n\n[1] FALSE\n\nis.numeric(starwars$height)\n\n[1] TRUE\n\ntypeof(starwars$name)\n\n[1] \"character\"\n\ntypeof(starwars$mass)\n\n[1] \"double\"\n\ntypeof(starwars_copy$mass)\n\n[1] \"double\"\n\n# plot some variables\n\n\nggplot2: We will continue learning about this across the semester. Show at a minimum that you can make a graph and add it to your blog. Try examples from the textbook. Show that you understand the layer concept. Identify aspects that are confusing to you so we can discuss them in class\n\n\n# make a data frame (table)\nmy_df <- data.frame(a = 1:5, b = c(\"one\",\"two\",\"three\",\"four\",\"five\"), random = runif(5,0,1))\n\n# access columns and rows with $ and []\nmy_df$a\n\n[1] 1 2 3 4 5\n\nmy_df$random\n\n[1] 0.05193465 0.23614238 0.38983457 0.87775319 0.93500799\n\nmy_df[1,] # row 1, all columns\n\n  a   b     random\n1 1 one 0.05193465\n\nmy_df[,1] # column 1, all rows\n\n[1] 1 2 3 4 5\n\nmy_df[1:2,] # rows 1 and 2, all columns\n\n  a   b     random\n1 1 one 0.05193465\n2 2 two 0.23614238\n\nmy_df[1:2,3] # rows 1 and 2, only column 3\n\n[1] 0.05193465 0.23614238\n\n\n\n# load some sample data\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(ggplot2)\n\nggplot() # blank canvas\n\n\n\nggplot(data = survey_data, mapping = aes(x = wait_time, y = satisfaction)) # data to pull from and assigning axis \n\n\n\n# ggplot(survey_data, aes(x = wait_time, y = satisfaction)) shortened version of the same thing\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +      # the plus sign signals more info/layers\n  geom_point() # scatter plot\n\n\n\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +\n  geom_point(color=\"black\", size=1) +\n  geom_point(color=\"#afa0e8\", size=0.5) + # use color name or hex number\n  geom_smooth() + \n  geom_smooth(method =\"lm\") # lm stands for linear model\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/Loops and Logic/index.html",
    "href": "posts/Loops and Logic/index.html",
    "title": "Logic",
    "section": "",
    "text": "Loops and Logic\nLogic statements are used to compare two things, or two sets of things. The output of comparison is a TRUE or FALSE statment. If many things are being compared at once, the output could be many TRUE or FALSE statements for each comparison\n\n1 == 1 # is 1 equal to 1?\n\n[1] TRUE\n\n#> [1] TRUE\n1 == 2 # is 1 equal to 2?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\n1 == c(2, 1, 3)\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\n\n\n\nNot Equal To (!=)\n\n1 != 1 # is 1 equal to 1?\n\n[1] FALSE\n\n#> [1] FALSE\n1 != 2 # is 1 equal to 2?\n\n[1] TRUE\n\n#> [1] TRUE\n\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n1 != c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n\n\nGreater Than and Less Than\n\n1 > 1 # is 1 greater than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n5 > 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 < 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 < 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\nc(1, 2, 3) < c(2, 1, 3)\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n2 > c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n\n1 >= 1 # is 1 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n5 >= 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 <= 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 <= 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE  TRUE\n\n#> [1] FALSE  TRUE  TRUE\nc(1, 2, 3) <= c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n2 >= c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n\n\n\nAND\nThe ampersand & is used for AND, which allows use to evaluate whether two or more properties are all TRUE.\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nOR\nThe | is used for OR, which allows use to evaluate at least one of the properties is TRUE.\n\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nTrue False\nWhen R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.\n\nc(1, 2, 3) == c(1, 2, 3)\n\n[1] TRUE TRUE TRUE\n\n#> [1] TRUE TRUE TRUE\nsum(c(1, 2, 3) == c(1, 2, 3))\n\n[1] 3\n\n#> [1] 3\n\nc(1, 2, 3) == c(2, 1, 3)\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\nsum(c(1, 2, 3) == c(2, 1, 3))\n\n[1] 1\n\n#> [1] 1\n\n\n\nIf Else\nA roller-coaster operator checks if people are taller than a line to see if they can ride the coaster. This is an IF ELSE control structure. IF the person is taller than the line, then they can go on the ride; ELSE (otherwise) the person can not go on the ride.\nIn other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different.\nIF and ELSE statements let us specify the conditions when specific actions are taken. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.\nConsider this:\n\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] 1\n\n#> [1] 1\n\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] \"A is not 1\"\n\n#> [1] \"A is not 1\"\n\nNormally Found (if and else) in a Loop like this:\n\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n\nWe can have multiple conditions in our if statements.\n\na <- c(1, 2, 3, 1, 2, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else if (i == 2) {\n    print(\"I'm a 2\") # what to do when i is 2\n  } else if (i == 3) {\n    print(\"I'm a 3\") # what to do when i is 3\n  } else {\n    print(\"I'm not any of the above\") #what to do when none are true\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm a 3\"\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm not any of the above\"\n[1] \"I'm a 1\"\n\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm a 3\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm not any of the above\"\n#> [1] \"I'm a 1\"\n\n\n\nLoops\nfor(){} for(loop control){do something each iteration}\nfor(iterator in vector) { #do something\nLoop control is defined in between the parentheses. The name of the iterator is placed on the left of in(can be assigned any name you want, does not need to be declared in advance). During the execution of the loop, the iterator takes on the values inside the vector which is placed on the right side of in. Specifically, the following is happening.\nLoop steps: 1. iterator <- vector[1] 2. iterator <- vector[2] 3. iterator <- vector[3] 4. etc.\nThe loop will automatically stop once it reaches the last item in the vector. The loop can be stopped before that using the break command.\n\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n\n\n# show the value of i each step of the loop\nfor(i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n# define the vector to loop over in advance\nx <- 1:5\nfor (i in x) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1, 5, 2, 3, 4)\nfor (i in my_sequence) {\n  print(i)\n}\n\n[1] 1\n[1] 5\n[1] 2\n[1] 3\n[1] 4\n\n#> [1] 1\n#> [1] 5\n#> [1] 2\n#> [1] 3\n#> [1] 4\n\n\n# index vector does not need to be numbers\nmy_things <- c(\"A\", \"B\", \"C\", \"D\")\nfor (i in my_things) {\n  print(i)\n}\n\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\"\n\n#> [1] \"A\"\n#> [1] \"B\"\n#> [1] \"C\"\n#> [1] \"D\"\n\n\n\nBreaking Loops\nbreak stops a loop. Used with logical statements to define the conditions necessary to cause the break.\n\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n\n\n\nWhile Loops\nWhile loops run until a logical condition is met. Here there is no iterator, just a logic statement that needs to be met.\nThis one prints i while i is less than 6. As soon as i becomes “not less than 6”, then the loop stops. Critically, inside the loop, the value of i increases each iteration.\n\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i = i + 1 #add one eachs step of the loop\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n\nRepeat Loops\nUntil a condition is met\n\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"
  },
  {
    "objectID": "posts/Data Import/index.html",
    "href": "posts/Data Import/index.html",
    "title": "Data Import",
    "section": "",
    "text": "Week Five: Data Import\n\nlibrary(tidyverse)     # includes readr & tibble\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(rio)           # for almost any data import/export\nlibrary(haven)         # for SPSS, Stata,and SAS files\nlibrary(readxl)        # for Excel files\nlibrary(googlesheets4) # for Google Sheets\n\n\n\nWrite your own data\n\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE,\n  numbers = c(1,2,3),\n  more_numbers = 1:3,\n  even_more = seq(1,3,1)\n)\n# print it\navatar\n\n# A tibble: 3 × 6\n  name   bends friendly numbers more_numbers even_more\n  <chr>  <chr> <lgl>      <dbl>        <int>     <dbl>\n1 Katara water TRUE           1            1         1\n2 Toph   earth TRUE           2            2         2\n3 Sokka  <NA>  TRUE           3            3         3\n\n\n\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly, ~numbers,\n  \"Katara\", \"water\", TRUE, 1L,\n  \"Toph\",   \"earth\", TRUE, 2L,\n  \"Sokka\",  NA,      TRUE, 3L\n)\navatar_by_row\n\n# A tibble: 3 × 4\n  name   bends friendly numbers\n  <chr>  <chr> <lgl>      <int>\n1 Katara water TRUE           1\n2 Toph   earth TRUE           2\n3 Sokka  <NA>  TRUE           3"
  },
  {
    "objectID": "posts/Midterm_Part_1/index.html",
    "href": "posts/Midterm_Part_1/index.html",
    "title": "Basic Skills",
    "section": "",
    "text": "Demonstration\nDemonstrate your ability to use these basic programming concepts in R.\nQuestion 1:\n\n# Create a character object\nmy_string <- \"Hi Professor Crump!\"\nprint(my_string)\n\n[1] \"Hi Professor Crump!\"\n\n# Create a numeric object\nmy_age <- 23\nprint(my_age)\n\n[1] 23\n\n# Create an integer object\nnumber_one_prof <- 1L\nprint(number_one_prof)\n\n[1] 1\n\n# Create a logical object\nthe_best_prof <- TRUE\nprint(the_best_prof)\n\n[1] TRUE\n\n# Create a data frame\nmy_dataframe <- data.frame(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\"))\nprint(my_dataframe)\n\n  x y\n1 1 a\n2 2 b\n3 3 c\n\n# Create a list\nmy_list <- list(a = 1, b = \"love RStudio\", c = TRUE)\nprint(my_list)\n\n$a\n[1] 1\n\n$b\n[1] \"love RStudio\"\n\n$c\n[1] TRUE\n\n# Indexing objects\n# Index a character object\nprint(my_string[1])\n\n[1] \"Hi Professor Crump!\"\n\n# Change an element of a list\nmy_list[[2]] <- \"Sike\"\nprint(my_list)\n\n$a\n[1] 1\n\n$b\n[1] \"Sike\"\n\n$c\n[1] TRUE\n\n\nQuestion 2:\n\n# Check if two numbers are equal\n1 == 5\n\n[1] FALSE\n\n# Output: FALSE\n\n1== 1.0\n\n[1] TRUE\n\n# Output: TRUE\n\n# Check if a number is greater than or equal to another number\n5 >= 3\n\n[1] TRUE\n\n# Output: TRUE\n\n7<= 3\n\n[1] FALSE\n\n# Output: FALSE\n\n# Check if a character string is not equal to another string\n\"Hi\" != \"Professor\"\n\n[1] TRUE\n\n# Output: TRUE\n\n\"You Rock\" != \"You Rock\"\n\n[1] FALSE\n\n# Output: FALSE\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\nQuestion 3:\n\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"Psych Rules\")\n}\n\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n\n\nQuestion 4:\n\n# Define a function that takes two arguments and returns their sum\nmy_function_example <- function(x, y) {\n  return(x + y)\n}\n\n# Call the function with two arguments\nresult <- my_function_example(9, 10)\nprint(result)\n\n[1] 19\n\n# Output: 7"
  }
]