[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "This is a template for using quarto to create a course blog. A course blog can be used in many ways to engage with course content. For example, you could use the blog to post assignments, or to dive more deeply into course material that interests you. By the end of the course, your blog can serve as a portfolio of ways that you engaged in the material. By learning how to use quarto for your blog, you will also be learning new skills for creating and sharing reproducible documents that could be useful to you in the future.\nThe purpose of this page is to provide tips and pointers about blogging with quarto. Quarto is simple enough for creating a basic course blog. However, it is also very deep and can be used to create all sorts of documents, from website, to slide decks, and books.\n\n\nMany questions about quarto can be answered from the quarto documentation located at: https://quarto.org.\nIf you are looking for something specific and don’t know where to find it on the website, use the search tool in the top right corner.\n\n\n\n\nTo use this template you will need a Github.com account, and access to R and Rstudio.\nYou can get access by creating a Github.com account, and downloading the necessary open-source software to your machine.\nIt is also possible to use Rstudio in your web-browser, which does not require downloading any software. There are two sets of instructions, one for the downloading approach, and the other for using Rstudio cloud. Scroll to the bottom for instructions on using Rstudio cloud.\n\n\n\nIn order to use this template you will need to install some free open-source software on your computer.\n\nSign up for a free account at https://github.com. This a website for sharing open-source software, but it can also be used to serve your blog as a website for free.\nDownload Github Desktop and install it on your machine. This should install the version control software git on your system, and you can use Github Desktop to easily push your blog from your local computer so that it can be viewed on Github.com.\nDownload R and install it on your machine. R is a programming language capable of many things, and it needs to be on your machine before you can run R Studio.\nDownload R Studio Desktop and install it on your machine. R Studio is called an “IDE” or integrated development environment, that you can use to write your blog with quarto.\n\n\n\n\nOnce you have the software installed, the next step is to create a quarto blog project in R studio. The collection of files in this template is a pre-made quarto blog project that you can modify for your own purposes. You can also make one yourself in Rstudio.\nAssuming you have downloaded this template, and you have installed the above software, then you need to open quartoCourseBlog.Rproj.\n\n\n\n\nTo find out if everything is working, try rendering the blog. Go to the “Build” Tab and press “Render Website”.\n\nAfter the rendering is complete, you should be able to view your blog. It might show up in the viewer pane like this:\n\nAnd if you press the ‘window-with-an-arrow’ button, you can view the website in your default browser. Quarto websites automatically adjust for the size of the window, so it may appear differently in the viewer pane versus the browser.\n\n\n\nAll of the blog posts are located in the posts folder.\n\nTo make a new post, copy an existing post and then modify it. For example, my posts folder currently contains one post, and it is inside the my_first_post folder.\n\nI can copy the folder and make a new one with the same contents from the Rstudio gear-box menu:\n\nI made a folder for a second post called Example_assignment.\n\nThese are the two files inside the folder. The .qmd file is a plain text file where you will write the blog post. This folder can also be used to store other assets you might put in the post, such as pictures.\n\n\n\nTo write a new post, open the .qmd file, edit the text, and then re-render the website. This is what the text in the .qmd file looked like when I copied it.\n\nThe text at the top between the “---” is called YAML, and provides meta-data for your document. This is where you can change the title, date, name, and add keywords if you want.\nThe rest of the document is for the main body of the post. For example, I changed the text to read:\n\n\n\n\n\nRender the website from the build tab again to see your new post.\n\n\n\nTo share your blog online you will have to publish it on a server that can be accessed by other people on the internet. There are multiple ways to do this step, and I recommend using Github pages. You can view more in-depth instructions from quarto here https://quarto.org/docs/publishing/github-pages.html.\nHere are the steps:\n\nOpen Github Desktop\nGo to preferences and sign in to your Github.com account\n“Add” your blog project folder to Github Desktop\nThere should be an option for a commit message, write a note in there like “first commit”.\nPublish to github.com and uncheck private repository so that other people will be able to see your repository.\nYou should now be able to see your new repository in your github.com profile, which means you should be able to see a copy of your blog files in the repository.\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder.\nAccess the blog from the url generated by the github pages settings page.\n\n\n\n\nWhenever you make changes to your blog project that you want to share online follow these steps:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\n\n\nI am planning to add a video overview of these steps soon. In the meantime, these instructions may be enough to get started with R studio cloud and github.com.\n\nSign up for a free account with posit cloud here https://posit.cloud/plans/free\nSign up for a free https://github.com account.\nLog in to Github, and search for this repository https://github.com/CrumpLab/quartoCourseBlog.\n\n\nClick the green “Use this template” Button\nThis will make a copy of the template in your github account, it will show up as one of your repositories\nGive your new repository a name\n\n\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder. You should now be able to view the blog from the url given by github pages.\nLog into Posit Cloud\nCreate a New Project, choose “New Project from Git Repository”\n\n\nenter the URL to the github repository you just made\n\n\nLoad the project, and edit/modify the files (see above for examples of creating new posts etc.)\nTo send your changed files back to github.com you need to do a few steps\n\n\nFrom the Git tab: stage your changes, commit your changes, and push your changes using the green up arrow.\nYou will also need to authenticate your git credentials, and allow Rstudio cloud to update your github repository\nIn the terminal run these two lines, but replace with your name and email\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n\nWhen you “push” your changes back to Github using the green up arrow, you will be asked to enter a username and password. You can enter the username for your Github.com account, but your password won’t work. You need to set up a personal access token.\nGo to your github.com profile > settings page. Scroll down, click on “<> Developer Settings”, on the left\nClick on personal access tokens, generate a new token, give it repo access. Save the text somewhere and use it as your github password when pushing from RStudio.\n\n\nAt this point you should be able to work on your blog in Rstudio Cloud, and push your changes to have them updated on github.com, which serves your blog online.\n\n\n\n\nSee this growing list of quarto resources for much, much more:\nhttps://github.com/mcanouil/awesome-quarto"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noon’s Blog",
    "section": "",
    "text": "Making Slides\n\n\n\n\n\n\n\n\n\n\n\n\nMay 8, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Wrangling\n\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nExample Final\n\n\n\n\n\n\n\n\n\n\n\n\nMay 3, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Tidying\n\n\n\n\n\n\n\n\n\n\n\n\nApr 26, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Relations\n\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nProblem Solving\n\n\n\n\n\n\n\nskills\n\n\n\n\n\n\n\n\n\n\n\nMar 31, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nBasic Skills\n\n\n\n\n\n\n\nskills\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData relations\n\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nGGPlot Part 2\n\n\n\n\n\n\n\n\n\n\n\n\nMar 22, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Summaries: Week\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nMar 15, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nLogic\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Import\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 27, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nData Visualization\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 21, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nUsing qmd Files\n\n\n\n\n\n\n\nskills\n\n\ntips\n\n\n\n\n\n\n\n\n\n\n\nFeb 15, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nWeek 2\n\n\n\n\n\n\n\ncourse\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 6, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nMy First post\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nFeb 4, 2023\n\n\nNoon Elsaeyed\n\n\n\n\n\n\n  \n\n\n\n\nExample assignment\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nNoon Elsaeyed\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "“About” pages are special quarto template pages, with multiple options: https://quarto.org/docs/websites/website-about.html.\nTry changing the template type from jolla to one of the other options for a different look and feel."
  },
  {
    "objectID": "posts/my_first_post/index.html",
    "href": "posts/my_first_post/index.html",
    "title": "My First post",
    "section": "",
    "text": "Welcome to my blog!\nHere are some of my goals:\nAnd much more!"
  },
  {
    "objectID": "posts/my_first_post/index.html#an-introduction-to-me-and-my-interests",
    "href": "posts/my_first_post/index.html#an-introduction-to-me-and-my-interests",
    "title": "My First post",
    "section": "An Introduction to Me and My Interests",
    "text": "An Introduction to Me and My Interests\nI am a biology major with a minor in psychology, and I am planning to graduate in the coming December.\nI want to build a career in research, and right now I am most fascinated in neuroscience. All of my hands on lab work has been in that field, and it has been the most interesting experience working with different PI’s and graduate students on their projects for the last year.\nBesides academics I dabble in traditional art like drawing and painting, as well as some graphic design. I consider myself a literature enthusiast, and I read ALOT!\n“The future is an open book”\n\nThis spring semester I hope to create a reference to using RStudio for data visualization that can help other upcoming scientist like myself, and that I can go back to in a pinch."
  },
  {
    "objectID": "posts/My Notes/index.html",
    "href": "posts/My Notes/index.html",
    "title": "Week 2",
    "section": "",
    "text": "Here I will roughly draft some notes during class time, to be organized later.\nFEBRUARY 6th, 2023\nUsing GitHub: generally a public platform\nHow to commit changes to GitHub:\nMake changes on Posit>Render>Commit changes in GitHub and push.\nThis is for Github Desktop.\nThere is a way to do it on the browser when using Posit Cloud:\nGit tab>Commit>Push\nHow to get a preview of the website while staying in RStudio:\nTools>Global Options>R Markdown>Viewer pane\nIn the console: question mark before a function will open the help file for it.\nString means text anything in quotes ” ”\nTwo question marks will open any file with the function name in it\nTwo number with a colon in between will give a sequence (1:5) will give 1 2 3 4 5\nc() will make a list, separate the values by commas\n<- is an assignment of values to a name (which will show up in the environment)\nsample(x = 1:6, size = 10, replace = TRUE, prob = rep(1/6,6))\nx= the options to sample from\nsize= how many times to sample\nreplace= whether or not to exclude an option once it is sampled\nprob= probability of choosing each option"
  },
  {
    "objectID": "posts/Example_assignment/index.html",
    "href": "posts/Example_assignment/index.html",
    "title": "Example assignment",
    "section": "",
    "text": "This assignment engages you in the process of introspection. Your task is to use introspection to evaluate and describe your own mental imagery abilities. Attempt to answer the following kinds of questions. What is your mental imagery like? Do you have mental imagery for different kinds of senses? Is your mental imagery vivid and life-like or very different from normal perception? How would you describe your mental imagery?\nYou should write a minimum of 250 words, but feel free to write more. Submit your document on blackboard by the due date."
  },
  {
    "objectID": "posts/Example_assignment/index.html#my-mental-imagery",
    "href": "posts/Example_assignment/index.html#my-mental-imagery",
    "title": "Example assignment",
    "section": "My mental imagery",
    "text": "My mental imagery\nMy mental imagery is like…"
  },
  {
    "objectID": "posts/QMD Tips/index.html",
    "href": "posts/QMD Tips/index.html",
    "title": "Using qmd Files",
    "section": "",
    "text": "Here are a few things we should be able to do by the end of week 3:\n1. Be able to make a new .qmd document\nyou can either copy a post file and rename it\nor File>New Quarto Document> save as index.qmd in the posts folder\nor from the File tab in the viewer side of RStudio (without the top level IML that sets the parameters of the document like title/author/date)\n2. Be able to render a .qmd document\nfrom the source, from the build tab or from the console\n3. Explain the difference between the source editor view and visual editor view in Rstudio.\nThe visual view shows you the result of the formatting and how it would look in the website, while source view is just plain text with the markdown options\n4. Be able to insert simple markdown plain text (headers, lists, paragraphs), and render the document."
  },
  {
    "objectID": "posts/QMD Tips/index.html#header-2",
    "href": "posts/QMD Tips/index.html#header-2",
    "title": "Using qmd Files",
    "section": "Header 2",
    "text": "Header 2\n\nHeader 3\n\nunordered list\nsub item 1\nsub item 2\n\nTo insert an image :\n\n5. Be aware of resources to help you learn more about markdown options.\nMarkdwon basics on the CrumpLab website\nitalics and bold\nsuperscript2 / subscript2\nstrikethrough\nverbatim code\n6. Be able to insert an R code chunk, and show the output in the rendered document.\nwrite stuff\n\n\n\n\n1+1\n\n[1] 2\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nprint(\"a title\")\n\n[1] \"a title\"\n\ncat(\"and another title after it \\n like this\")\n\nand another title after it \n like this\n\n\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\nmacro for quick insert\n\nor use alt>command>i to automatically get the r block\n7. Running R code chunks in a qmd\n\npressing play\ncopy/paste into console\nhighlight then command-enter (mac)to run selection at a time\nprecedence issues (first to last)\n\n8. Be aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\n9. Be able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\n10. Write inline r code.\n11. Explain how the rendering environment is different from the Rstudio environment.\n12. Be aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/Data Visualization/index.html",
    "href": "posts/Data Visualization/index.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Week Four: Data Visaulization\n\nData types: Show that you understand what is available to you in R. Note also, this goal overlaps with part of the midterm project. See the appendix on Data Types in the textbook for help. Write notes and R code chunks to demonstrate your knowledge\n\n\n# type of numeric data\ntypeof(10)\n\n[1] \"double\"\n\ntypeof(10.0)\n\n[1] \"double\"\n\ntypeof(10L)\n\n[1] \"integer\"\n\n# if you want to know if something is numeric (a double or an integer), you can use the function is.numeric() and it will tell you if it is numeric (TRUE) or not (FALSE).\nis.numeric(10L)\n\n[1] TRUE\n\nis.numeric(10.0)\n\n[1] TRUE\n\nis.numeric(\"Text\")\n\n[1] FALSE\n\n# Characters (also called “strings”) are any text between quotation marks.\ntypeof(\"This is a character string\")\n\n[1] \"character\"\n\ntypeof('You can use double or single quotes')\n\n[1] \"character\"\n\n# This can include quotes, but you have to escape quotes using a backslash to signal that the quote isn’t meant to be the end of the string.\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\n# cat() prints the arguments\n\ncat(my_string)\n\nThe instructor said, \"R is cool,\" and the class agreed.\n\n# Logical data (also sometimes called “Boolean” values) is one of two values: true or false. In R, we always write them in uppercase: TRUE and FALSE.\nclass(TRUE)\n\n[1] \"logical\"\n\nclass(FALSE)\n\n[1] \"logical\"\n\n\n\n# assign 1 to the object named a\na <- 1\nclass(a)\n\n[1] \"numeric\"\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\n# make a vector with a thing in it\na_thing <- 1\nanother_thing <- c(1,2)\nmany_things <- c(1:10)\n\n# these are all now objects in the environment\n\n\nTidy Data: Show that you understand what this means. Give an example of data this is in tidy format, and data that is not.\n\n\n# load ggplot2 and some sample datasets\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# the starwars data is loaded by tidyverse\n#assign the starwars dataset to a variable (object) name\nstarwars_copy<- starwars\n\n# check out some of the data types\nhead(starwars_copy)\n\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n\nclass(starwars_copy$name) \n\n[1] \"character\"\n\nclass(starwars_copy$height)\n\n[1] \"integer\"\n\nclass(starwars_copy$mass)\n\n[1] \"numeric\"\n\nstarwars_copy$sex\n\n [1] \"male\"           \"none\"           \"none\"           \"male\"          \n [5] \"female\"         \"male\"           \"female\"         \"none\"          \n [9] \"male\"           \"male\"           \"male\"           \"male\"          \n[13] \"male\"           \"male\"           \"male\"           \"hermaphroditic\"\n[17] \"male\"           \"male\"           \"male\"           \"male\"          \n[21] \"male\"           \"none\"           \"male\"           \"male\"          \n[25] \"male\"           \"male\"           \"female\"         \"male\"          \n[29] \"male\"           \"male\"           \"male\"           \"male\"          \n[33] \"male\"           \"male\"           \"male\"           \"male\"          \n[37] NA               \"male\"           \"male\"           NA              \n[41] \"female\"         \"male\"           \"male\"           \"female\"        \n[45] \"male\"           \"male\"           \"male\"           \"male\"          \n[49] \"male\"           \"male\"           \"male\"           \"female\"        \n[53] \"male\"           \"male\"           \"male\"           \"male\"          \n[57] \"male\"           \"female\"         \"male\"           \"male\"          \n[61] \"female\"         \"female\"         \"female\"         \"male\"          \n[65] \"male\"           \"male\"           \"female\"         \"male\"          \n[69] \"male\"           \"female\"         \"female\"         \"male\"          \n[73] \"none\"           \"male\"           \"male\"           \"female\"        \n[77] \"male\"           \"male\"           \"male\"           NA              \n[81] \"male\"           \"male\"           \"female\"         \"male\"          \n[85] \"none\"           NA               \"female\"        \n\nis.numeric(starwars$name)\n\n[1] FALSE\n\nis.numeric(starwars$height)\n\n[1] TRUE\n\ntypeof(starwars$name)\n\n[1] \"character\"\n\ntypeof(starwars$mass)\n\n[1] \"double\"\n\ntypeof(starwars_copy$mass)\n\n[1] \"double\"\n\n# plot some variables\n\n\nggplot2: We will continue learning about this across the semester. Show at a minimum that you can make a graph and add it to your blog. Try examples from the textbook. Show that you understand the layer concept. Identify aspects that are confusing to you so we can discuss them in class\n\n\n# make a data frame (table)\nmy_df <- data.frame(a = 1:5, b = c(\"one\",\"two\",\"three\",\"four\",\"five\"), random = runif(5,0,1))\n\n# access columns and rows with $ and []\nmy_df$a\n\n[1] 1 2 3 4 5\n\nmy_df$random\n\n[1] 0.05193465 0.23614238 0.38983457 0.87775319 0.93500799\n\nmy_df[1,] # row 1, all columns\n\n  a   b     random\n1 1 one 0.05193465\n\nmy_df[,1] # column 1, all rows\n\n[1] 1 2 3 4 5\n\nmy_df[1:2,] # rows 1 and 2, all columns\n\n  a   b     random\n1 1 one 0.05193465\n2 2 two 0.23614238\n\nmy_df[1:2,3] # rows 1 and 2, only column 3\n\n[1] 0.05193465 0.23614238\n\n\n\n# load some sample data\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(ggplot2)\n\nggplot() # blank canvas\n\n\n\nggplot(data = survey_data, mapping = aes(x = wait_time, y = satisfaction)) # data to pull from and assigning axis \n\n\n\n# ggplot(survey_data, aes(x = wait_time, y = satisfaction)) shortened version of the same thing\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +      # the plus sign signals more info/layers\n  geom_point() # scatter plot\n\n\n\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +\n  geom_point(color=\"black\", size=1) +\n  geom_point(color=\"#afa0e8\", size=0.5) + # use color name or hex number\n  geom_smooth() + \n  geom_smooth(method =\"lm\") # lm stands for linear model\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/Loops and Logic/index.html",
    "href": "posts/Loops and Logic/index.html",
    "title": "Logic",
    "section": "",
    "text": "Loops and Logic\nLogic statements are used to compare two things, or two sets of things. The output of comparison is a TRUE or FALSE statment. If many things are being compared at once, the output could be many TRUE or FALSE statements for each comparison\n\n1 == 1 # is 1 equal to 1?\n\n[1] TRUE\n\n#> [1] TRUE\n1 == 2 # is 1 equal to 2?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\n1 == c(2, 1, 3)\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\n\n\n\nNot Equal To (!=)\n\n1 != 1 # is 1 equal to 1?\n\n[1] FALSE\n\n#> [1] FALSE\n1 != 2 # is 1 equal to 2?\n\n[1] TRUE\n\n#> [1] TRUE\n\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n1 != c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n\n\nGreater Than and Less Than\n\n1 > 1 # is 1 greater than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n5 > 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 < 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 < 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE FALSE\n\n#> [1] FALSE  TRUE FALSE\nc(1, 2, 3) < c(2, 1, 3)\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n2 > c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE FALSE FALSE\n\n#> [1]  TRUE FALSE FALSE\n\n\n1 >= 1 # is 1 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n5 >= 1 # is 5 greater than 1?\n\n[1] TRUE\n\n#> [1] TRUE\n3 <= 2 # is 3 less than 2?\n\n[1] FALSE\n\n#> [1] FALSE\n3 <= 1 # is 3 less than 1?\n\n[1] FALSE\n\n#> [1] FALSE\n\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n\n[1] FALSE  TRUE  TRUE\n\n#> [1] FALSE  TRUE  TRUE\nc(1, 2, 3) <= c(2, 1, 3)\n\n[1]  TRUE FALSE  TRUE\n\n#> [1]  TRUE FALSE  TRUE\n\n2 >= c(1, 2, 3) # is greater than each of the numbers\n\n[1]  TRUE  TRUE FALSE\n\n#> [1]  TRUE  TRUE FALSE\n\n\n\nAND\nThe ampersand & is used for AND, which allows use to evaluate whether two or more properties are all TRUE.\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nOR\nThe | is used for OR, which allows use to evaluate at least one of the properties is TRUE.\n\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n\n\nTrue False\nWhen R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.\n\nc(1, 2, 3) == c(1, 2, 3)\n\n[1] TRUE TRUE TRUE\n\n#> [1] TRUE TRUE TRUE\nsum(c(1, 2, 3) == c(1, 2, 3))\n\n[1] 3\n\n#> [1] 3\n\nc(1, 2, 3) == c(2, 1, 3)\n\n[1] FALSE FALSE  TRUE\n\n#> [1] FALSE FALSE  TRUE\nsum(c(1, 2, 3) == c(2, 1, 3))\n\n[1] 1\n\n#> [1] 1\n\n\n\nIf Else\nA roller-coaster operator checks if people are taller than a line to see if they can ride the coaster. This is an IF ELSE control structure. IF the person is taller than the line, then they can go on the ride; ELSE (otherwise) the person can not go on the ride.\nIn other words, IF the situation is X, then do something; ELSE (if the situation is not X), then do something different.\nIF and ELSE statements let us specify the conditions when specific actions are taken. Generally, IF and ELSE statements are used inside loops (for, or while, or repeat loops), because at each step or iteration of the loop, we want to check something, and then do something.\nConsider this:\n\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] 1\n\n#> [1] 1\n\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] \"A is not 1\"\n\n#> [1] \"A is not 1\"\n\nNormally Found (if and else) in a Loop like this:\n\na <- c(1, 0, 1, 0, 0, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else {\n    print(\"I'm not a 1\") # what to do when i is not 1\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm not a 1\"\n[1] \"I'm a 1\"\n\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm not a 1\"\n#> [1] \"I'm a 1\"\n\nWe can have multiple conditions in our if statements.\n\na <- c(1, 2, 3, 1, 2, 0, 1) # make a variable contain 1s and 0s\n\n# write a loop to check each element in the variable\n# and do different things depending on the element\n\nfor (i in a) {\n  if (i == 1) {\n    print(\"I'm a 1\") # what to do when i is 1\n  } else if (i == 2) {\n    print(\"I'm a 2\") # what to do when i is 2\n  } else if (i == 3) {\n    print(\"I'm a 3\") # what to do when i is 3\n  } else {\n    print(\"I'm not any of the above\") #what to do when none are true\n  }\n}\n\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm a 3\"\n[1] \"I'm a 1\"\n[1] \"I'm a 2\"\n[1] \"I'm not any of the above\"\n[1] \"I'm a 1\"\n\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm a 3\"\n#> [1] \"I'm a 1\"\n#> [1] \"I'm a 2\"\n#> [1] \"I'm not any of the above\"\n#> [1] \"I'm a 1\"\n\n\n\nLoops\nfor(){} for(loop control){do something each iteration}\nfor(iterator in vector) { #do something\nLoop control is defined in between the parentheses. The name of the iterator is placed on the left of in(can be assigned any name you want, does not need to be declared in advance). During the execution of the loop, the iterator takes on the values inside the vector which is placed on the right side of in. Specifically, the following is happening.\nLoop steps: 1. iterator <- vector[1] 2. iterator <- vector[2] 3. iterator <- vector[3] 4. etc.\nThe loop will automatically stop once it reaches the last item in the vector. The loop can be stopped before that using the break command.\n\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n#> [1] \"hello\"\n\n\n# show the value of i each step of the loop\nfor(i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n# define the vector to loop over in advance\nx <- 1:5\nfor (i in x) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1, 5, 2, 3, 4)\nfor (i in my_sequence) {\n  print(i)\n}\n\n[1] 1\n[1] 5\n[1] 2\n[1] 3\n[1] 4\n\n#> [1] 1\n#> [1] 5\n#> [1] 2\n#> [1] 3\n#> [1] 4\n\n\n# index vector does not need to be numbers\nmy_things <- c(\"A\", \"B\", \"C\", \"D\")\nfor (i in my_things) {\n  print(i)\n}\n\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\"\n\n#> [1] \"A\"\n#> [1] \"B\"\n#> [1] \"C\"\n#> [1] \"D\"\n\n\n\nBreaking Loops\nbreak stops a loop. Used with logical statements to define the conditions necessary to cause the break.\n\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n\n\n\nWhile Loops\nWhile loops run until a logical condition is met. Here there is no iterator, just a logic statement that needs to be met.\nThis one prints i while i is less than 6. As soon as i becomes “not less than 6”, then the loop stops. Critically, inside the loop, the value of i increases each iteration.\n\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i = i + 1 #add one eachs step of the loop\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5\n\n\n\nRepeat Loops\nUntil a condition is met\n\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n#> [1] 1\n#> [1] 2\n#> [1] 3\n#> [1] 4\n#> [1] 5"
  },
  {
    "objectID": "posts/Data Import/index.html",
    "href": "posts/Data Import/index.html",
    "title": "Data Import",
    "section": "",
    "text": "Week Five: Data Import\n\nlibrary(tidyverse)     # includes readr & tibble\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(rio)           # for almost any data import/export\nlibrary(haven)         # for SPSS, Stata,and SAS files\nlibrary(readxl)        # for Excel files\nlibrary(googlesheets4) # for Google Sheets\n\n\n\nWrite your own data\n\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE,\n  numbers = c(1,2,3),\n  more_numbers = 1:3,\n  even_more = seq(1,3,1)\n)\n# print it\navatar\n\n# A tibble: 3 × 6\n  name   bends friendly numbers more_numbers even_more\n  <chr>  <chr> <lgl>      <dbl>        <int>     <dbl>\n1 Katara water TRUE           1            1         1\n2 Toph   earth TRUE           2            2         2\n3 Sokka  <NA>  TRUE           3            3         3\n\n\n\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly, ~numbers,\n  \"Katara\", \"water\", TRUE, 1L,\n  \"Toph\",   \"earth\", TRUE, 2L,\n  \"Sokka\",  NA,      TRUE, 3L\n)\navatar_by_row\n\n# A tibble: 3 × 4\n  name   bends friendly numbers\n  <chr>  <chr> <lgl>      <int>\n1 Katara water TRUE           1\n2 Toph   earth TRUE           2\n3 Sokka  <NA>  TRUE           3"
  },
  {
    "objectID": "posts/Midterm_Part_1/index.html",
    "href": "posts/Midterm_Part_1/index.html",
    "title": "Basic Skills",
    "section": "",
    "text": "Demonstration\nDemonstrate your ability to use these basic programming concepts in R.\nQuestion 1:\n\n# Create a character object\nmy_string <- \"Hi Professor Crump!\"\nprint(my_string)\n\n[1] \"Hi Professor Crump!\"\n\n# Create a numeric object\nmy_age <- 23\nprint(my_age)\n\n[1] 23\n\n# Create an integer object\nnumber_one_prof <- 1L\nprint(number_one_prof)\n\n[1] 1\n\n# Create a logical object\nthe_best_prof <- TRUE\nprint(the_best_prof)\n\n[1] TRUE\n\n# Create a data frame\nmy_dataframe <- data.frame(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\"))\nprint(my_dataframe)\n\n  x y\n1 1 a\n2 2 b\n3 3 c\n\n# Create a list\nmy_list <- list(a = 1, b = \"love RStudio\", c = TRUE)\nprint(my_list)\n\n$a\n[1] 1\n\n$b\n[1] \"love RStudio\"\n\n$c\n[1] TRUE\n\n# Indexing objects\n# Index a character object\nprint(my_string[1])\n\n[1] \"Hi Professor Crump!\"\n\n# Change an element of a list\nmy_list[[2]] <- \"Sike\"\nprint(my_list)\n\n$a\n[1] 1\n\n$b\n[1] \"Sike\"\n\n$c\n[1] TRUE\n\n\nQuestion 2:\n\n# Check if two numbers are equal\n1 == 5\n\n[1] FALSE\n\n# Output: FALSE\n\n1== 1.0\n\n[1] TRUE\n\n# Output: TRUE\n\n# Check if a number is greater than or equal to another number\n5 >= 3\n\n[1] TRUE\n\n# Output: TRUE\n\n7<= 3\n\n[1] FALSE\n\n# Output: FALSE\n\n# Check if a character string is not equal to another string\n\"Hi\" != \"Professor\"\n\n[1] TRUE\n\n# Output: TRUE\n\n\"You Rock\" != \"You Rock\"\n\n[1] FALSE\n\n# Output: FALSE\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n\n[1] FALSE\n\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n\n[1] TRUE\n\n#> [1] TRUE\n\nQuestion 3:\n\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"Psych Rules\")\n}\n\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n\n\nQuestion 4:\n\n# Define a function that takes two arguments and returns their sum\nmy_function_example <- function(x, y) {\n  return(x + y)\n}\n\n# Call the function with two arguments\nresult <- my_function_example(9, 10)\nprint(result)\n\n[1] 19\n\n# Output: 7"
  },
  {
    "objectID": "posts/Midterm_Part_2/index.html",
    "href": "posts/Midterm_Part_2/index.html",
    "title": "Problem Solving",
    "section": "",
    "text": "99 Bottles of Water\n\nfor (i in 99:1) {\n  if (i == 1) {\n    cat(sprintf(\"%d bottle of water on the wall, %d bottle of water.\\n\", i, i))\n    cat(\"Take one down, pass it around, no more bottles of water on the wall.\\n\")\n  } else {\n    cat(sprintf(\"%d bottles of water on the wall, %d bottles of water.\\n\", i, i))\n    cat(sprintf(\"Take one down, pass it around, %d %s of water on the wall.\\n\", i-1, ifelse(i-1 == 1, \"bottle\", \"bottles\")))\n  }\n}\n\n99 bottles of water on the wall, 99 bottles of water.\nTake one down, pass it around, 98 bottles of water on the wall.\n98 bottles of water on the wall, 98 bottles of water.\nTake one down, pass it around, 97 bottles of water on the wall.\n97 bottles of water on the wall, 97 bottles of water.\nTake one down, pass it around, 96 bottles of water on the wall.\n96 bottles of water on the wall, 96 bottles of water.\nTake one down, pass it around, 95 bottles of water on the wall.\n95 bottles of water on the wall, 95 bottles of water.\nTake one down, pass it around, 94 bottles of water on the wall.\n94 bottles of water on the wall, 94 bottles of water.\nTake one down, pass it around, 93 bottles of water on the wall.\n93 bottles of water on the wall, 93 bottles of water.\nTake one down, pass it around, 92 bottles of water on the wall.\n92 bottles of water on the wall, 92 bottles of water.\nTake one down, pass it around, 91 bottles of water on the wall.\n91 bottles of water on the wall, 91 bottles of water.\nTake one down, pass it around, 90 bottles of water on the wall.\n90 bottles of water on the wall, 90 bottles of water.\nTake one down, pass it around, 89 bottles of water on the wall.\n89 bottles of water on the wall, 89 bottles of water.\nTake one down, pass it around, 88 bottles of water on the wall.\n88 bottles of water on the wall, 88 bottles of water.\nTake one down, pass it around, 87 bottles of water on the wall.\n87 bottles of water on the wall, 87 bottles of water.\nTake one down, pass it around, 86 bottles of water on the wall.\n86 bottles of water on the wall, 86 bottles of water.\nTake one down, pass it around, 85 bottles of water on the wall.\n85 bottles of water on the wall, 85 bottles of water.\nTake one down, pass it around, 84 bottles of water on the wall.\n84 bottles of water on the wall, 84 bottles of water.\nTake one down, pass it around, 83 bottles of water on the wall.\n83 bottles of water on the wall, 83 bottles of water.\nTake one down, pass it around, 82 bottles of water on the wall.\n82 bottles of water on the wall, 82 bottles of water.\nTake one down, pass it around, 81 bottles of water on the wall.\n81 bottles of water on the wall, 81 bottles of water.\nTake one down, pass it around, 80 bottles of water on the wall.\n80 bottles of water on the wall, 80 bottles of water.\nTake one down, pass it around, 79 bottles of water on the wall.\n79 bottles of water on the wall, 79 bottles of water.\nTake one down, pass it around, 78 bottles of water on the wall.\n78 bottles of water on the wall, 78 bottles of water.\nTake one down, pass it around, 77 bottles of water on the wall.\n77 bottles of water on the wall, 77 bottles of water.\nTake one down, pass it around, 76 bottles of water on the wall.\n76 bottles of water on the wall, 76 bottles of water.\nTake one down, pass it around, 75 bottles of water on the wall.\n75 bottles of water on the wall, 75 bottles of water.\nTake one down, pass it around, 74 bottles of water on the wall.\n74 bottles of water on the wall, 74 bottles of water.\nTake one down, pass it around, 73 bottles of water on the wall.\n73 bottles of water on the wall, 73 bottles of water.\nTake one down, pass it around, 72 bottles of water on the wall.\n72 bottles of water on the wall, 72 bottles of water.\nTake one down, pass it around, 71 bottles of water on the wall.\n71 bottles of water on the wall, 71 bottles of water.\nTake one down, pass it around, 70 bottles of water on the wall.\n70 bottles of water on the wall, 70 bottles of water.\nTake one down, pass it around, 69 bottles of water on the wall.\n69 bottles of water on the wall, 69 bottles of water.\nTake one down, pass it around, 68 bottles of water on the wall.\n68 bottles of water on the wall, 68 bottles of water.\nTake one down, pass it around, 67 bottles of water on the wall.\n67 bottles of water on the wall, 67 bottles of water.\nTake one down, pass it around, 66 bottles of water on the wall.\n66 bottles of water on the wall, 66 bottles of water.\nTake one down, pass it around, 65 bottles of water on the wall.\n65 bottles of water on the wall, 65 bottles of water.\nTake one down, pass it around, 64 bottles of water on the wall.\n64 bottles of water on the wall, 64 bottles of water.\nTake one down, pass it around, 63 bottles of water on the wall.\n63 bottles of water on the wall, 63 bottles of water.\nTake one down, pass it around, 62 bottles of water on the wall.\n62 bottles of water on the wall, 62 bottles of water.\nTake one down, pass it around, 61 bottles of water on the wall.\n61 bottles of water on the wall, 61 bottles of water.\nTake one down, pass it around, 60 bottles of water on the wall.\n60 bottles of water on the wall, 60 bottles of water.\nTake one down, pass it around, 59 bottles of water on the wall.\n59 bottles of water on the wall, 59 bottles of water.\nTake one down, pass it around, 58 bottles of water on the wall.\n58 bottles of water on the wall, 58 bottles of water.\nTake one down, pass it around, 57 bottles of water on the wall.\n57 bottles of water on the wall, 57 bottles of water.\nTake one down, pass it around, 56 bottles of water on the wall.\n56 bottles of water on the wall, 56 bottles of water.\nTake one down, pass it around, 55 bottles of water on the wall.\n55 bottles of water on the wall, 55 bottles of water.\nTake one down, pass it around, 54 bottles of water on the wall.\n54 bottles of water on the wall, 54 bottles of water.\nTake one down, pass it around, 53 bottles of water on the wall.\n53 bottles of water on the wall, 53 bottles of water.\nTake one down, pass it around, 52 bottles of water on the wall.\n52 bottles of water on the wall, 52 bottles of water.\nTake one down, pass it around, 51 bottles of water on the wall.\n51 bottles of water on the wall, 51 bottles of water.\nTake one down, pass it around, 50 bottles of water on the wall.\n50 bottles of water on the wall, 50 bottles of water.\nTake one down, pass it around, 49 bottles of water on the wall.\n49 bottles of water on the wall, 49 bottles of water.\nTake one down, pass it around, 48 bottles of water on the wall.\n48 bottles of water on the wall, 48 bottles of water.\nTake one down, pass it around, 47 bottles of water on the wall.\n47 bottles of water on the wall, 47 bottles of water.\nTake one down, pass it around, 46 bottles of water on the wall.\n46 bottles of water on the wall, 46 bottles of water.\nTake one down, pass it around, 45 bottles of water on the wall.\n45 bottles of water on the wall, 45 bottles of water.\nTake one down, pass it around, 44 bottles of water on the wall.\n44 bottles of water on the wall, 44 bottles of water.\nTake one down, pass it around, 43 bottles of water on the wall.\n43 bottles of water on the wall, 43 bottles of water.\nTake one down, pass it around, 42 bottles of water on the wall.\n42 bottles of water on the wall, 42 bottles of water.\nTake one down, pass it around, 41 bottles of water on the wall.\n41 bottles of water on the wall, 41 bottles of water.\nTake one down, pass it around, 40 bottles of water on the wall.\n40 bottles of water on the wall, 40 bottles of water.\nTake one down, pass it around, 39 bottles of water on the wall.\n39 bottles of water on the wall, 39 bottles of water.\nTake one down, pass it around, 38 bottles of water on the wall.\n38 bottles of water on the wall, 38 bottles of water.\nTake one down, pass it around, 37 bottles of water on the wall.\n37 bottles of water on the wall, 37 bottles of water.\nTake one down, pass it around, 36 bottles of water on the wall.\n36 bottles of water on the wall, 36 bottles of water.\nTake one down, pass it around, 35 bottles of water on the wall.\n35 bottles of water on the wall, 35 bottles of water.\nTake one down, pass it around, 34 bottles of water on the wall.\n34 bottles of water on the wall, 34 bottles of water.\nTake one down, pass it around, 33 bottles of water on the wall.\n33 bottles of water on the wall, 33 bottles of water.\nTake one down, pass it around, 32 bottles of water on the wall.\n32 bottles of water on the wall, 32 bottles of water.\nTake one down, pass it around, 31 bottles of water on the wall.\n31 bottles of water on the wall, 31 bottles of water.\nTake one down, pass it around, 30 bottles of water on the wall.\n30 bottles of water on the wall, 30 bottles of water.\nTake one down, pass it around, 29 bottles of water on the wall.\n29 bottles of water on the wall, 29 bottles of water.\nTake one down, pass it around, 28 bottles of water on the wall.\n28 bottles of water on the wall, 28 bottles of water.\nTake one down, pass it around, 27 bottles of water on the wall.\n27 bottles of water on the wall, 27 bottles of water.\nTake one down, pass it around, 26 bottles of water on the wall.\n26 bottles of water on the wall, 26 bottles of water.\nTake one down, pass it around, 25 bottles of water on the wall.\n25 bottles of water on the wall, 25 bottles of water.\nTake one down, pass it around, 24 bottles of water on the wall.\n24 bottles of water on the wall, 24 bottles of water.\nTake one down, pass it around, 23 bottles of water on the wall.\n23 bottles of water on the wall, 23 bottles of water.\nTake one down, pass it around, 22 bottles of water on the wall.\n22 bottles of water on the wall, 22 bottles of water.\nTake one down, pass it around, 21 bottles of water on the wall.\n21 bottles of water on the wall, 21 bottles of water.\nTake one down, pass it around, 20 bottles of water on the wall.\n20 bottles of water on the wall, 20 bottles of water.\nTake one down, pass it around, 19 bottles of water on the wall.\n19 bottles of water on the wall, 19 bottles of water.\nTake one down, pass it around, 18 bottles of water on the wall.\n18 bottles of water on the wall, 18 bottles of water.\nTake one down, pass it around, 17 bottles of water on the wall.\n17 bottles of water on the wall, 17 bottles of water.\nTake one down, pass it around, 16 bottles of water on the wall.\n16 bottles of water on the wall, 16 bottles of water.\nTake one down, pass it around, 15 bottles of water on the wall.\n15 bottles of water on the wall, 15 bottles of water.\nTake one down, pass it around, 14 bottles of water on the wall.\n14 bottles of water on the wall, 14 bottles of water.\nTake one down, pass it around, 13 bottles of water on the wall.\n13 bottles of water on the wall, 13 bottles of water.\nTake one down, pass it around, 12 bottles of water on the wall.\n12 bottles of water on the wall, 12 bottles of water.\nTake one down, pass it around, 11 bottles of water on the wall.\n11 bottles of water on the wall, 11 bottles of water.\nTake one down, pass it around, 10 bottles of water on the wall.\n10 bottles of water on the wall, 10 bottles of water.\nTake one down, pass it around, 9 bottles of water on the wall.\n9 bottles of water on the wall, 9 bottles of water.\nTake one down, pass it around, 8 bottles of water on the wall.\n8 bottles of water on the wall, 8 bottles of water.\nTake one down, pass it around, 7 bottles of water on the wall.\n7 bottles of water on the wall, 7 bottles of water.\nTake one down, pass it around, 6 bottles of water on the wall.\n6 bottles of water on the wall, 6 bottles of water.\nTake one down, pass it around, 5 bottles of water on the wall.\n5 bottles of water on the wall, 5 bottles of water.\nTake one down, pass it around, 4 bottles of water on the wall.\n4 bottles of water on the wall, 4 bottles of water.\nTake one down, pass it around, 3 bottles of water on the wall.\n3 bottles of water on the wall, 3 bottles of water.\nTake one down, pass it around, 2 bottles of water on the wall.\n2 bottles of water on the wall, 2 bottles of water.\nTake one down, pass it around, 1 bottle of water on the wall.\n1 bottle of water on the wall, 1 bottle of water.\nTake one down, pass it around, no more bottles of water on the wall.\n\n\n\nIn this code, we use a for loop to iterate over the numbers from 99 down to 1. For each number, we print out the appropriate verse of the song using the cat() function. When we get to 1, we print out the final verse of the song.\n\n\n\nRolling a Pair of Dice\n\n# Set the number of simulations and rolls per simulation\nn_simulations <- 10000\nn_rolls <- 2\n\n# Set the number of sides on each die\nn_sides <- 6\n\n# Initialize a vector to store the counts of each possible sum\nsum_counts <- rep(0, 11)\n\n# Simulate rolling the dice and counting the sums\nfor (i in 1:n_simulations) {\n  # Roll the dice and compute the sum\n  rolls <- sample(1:n_sides, n_rolls, replace = TRUE)\n  roll_sum <- sum(rolls)\n\n  # Increment the count for the sum\n  sum_counts[roll_sum - 1] <- sum_counts[roll_sum - 1] + 1\n}\n\n# Compute the estimated probabilities of each possible sum\nsum_probs <- sum_counts / n_simulations\n\n# Print the estimated probabilities\ncat(\"Sum\\tProbability\\n\")\n\nSum Probability\n\nfor (i in 2:12) {\n  cat(i, \"\\t\", round(sum_probs[i - 1], 4), \"\\n\")\n}\n\n2    0.0263 \n3    0.0542 \n4    0.0845 \n5    0.1111 \n6    0.1355 \n7    0.1686 \n8    0.1359 \n9    0.1153 \n10   0.0876 \n11   0.0511 \n12   0.0299"
  },
  {
    "objectID": "posts/Week 7/index.html",
    "href": "posts/Week 7/index.html",
    "title": "GGPlot Part 2",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ngrades <- c(2.5, 8, 4)\nstudents <- c(\"A\",\"B\",\"C\")\nstudent_performance <- tibble(students,grades)\n# alternate syntax\nstudent_performance <- tibble(\n  grades = c(2.5, 8, 4),\n  students = c(\"A\",\"B\",\"C\")\n)\n# ggplot bar graph\nggplot(student_performance, aes(x = students, y = grades))+\n  geom_bar(stat = \"identity\", fill = \"white\", color = \"blue\") +\n  scale_y_continuous(breaks = 0:10,limits = c(0,10)) +\n  theme_classic() +\n  geom_text(label=grades, position = position_dodge(width=.9), vjust=-0.4)+\n  xlab(\"Students\")+\n  ylab(\"Grades\") +\n  ggtitle(\"Student Performance\") +\n  theme_classic(base_size = 12) +\n  theme(plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n#Create a dataframe\nfactor_one <- rep(as.factor(c(\"A\", \"B\", \"C\")), 2)\nfactor_two <- rep(as.factor(c(\"IIA\", \"IIB\")), 3)\ndv_means <- c(20, 30, 40, 20, 40, 40)\ndv_SEs   <- c(4, 3.4, 4, 3, 2, 4)\nplot_df <- data.frame(factor_one,\n                      factor_two,\n                      dv_means,\n                      dv_SEs)\n# basic bar graph\nggplot(plot_df,\n       aes(\n         x = factor_one,\n         y = dv_means,\n         group = factor_two,\n         fill = factor_two\n       )) +\n  geom_bar(stat = \"identity\", position = \"dodge\")"
  },
  {
    "objectID": "posts/Week 8/index.html",
    "href": "posts/Week 8/index.html",
    "title": "Data relations",
    "section": "",
    "text": "customers <- tibble(\n  id = 1:5,\n  city = c(\"Port Ellen\", \"Dufftown\", NA, \"Aberlour\", \"Tobermory\"),\n  postcode = c(\"PA42 7DU\", \"AB55 4DH\", NA, \"AB38 7RY\", \"PA75 6NR\")\n)\norders <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)"
  },
  {
    "objectID": "posts/Week 8/index.html#what-doers-dplyr-mutate-do",
    "href": "posts/Week 8/index.html#what-doers-dplyr-mutate-do",
    "title": "Data relations",
    "section": "what doers dplyr mutate do?",
    "text": "what doers dplyr mutate do?\n\norders_B <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)\n# add a new column\norders_B %>%\n  mutate(satisfaction = NA)\n\n# A tibble: 9 × 3\n     id items satisfaction\n  <dbl> <dbl> <lgl>       \n1     2    10 NA          \n2     3    18 NA          \n3     4    21 NA          \n4     4    23 NA          \n5     5     9 NA          \n6     5    11 NA          \n7     6    11 NA          \n8     6    12 NA          \n9     7     3 NA          \n\n# add mutiplie new column\norders_B %>%\n  mutate(satisfaction = NA,\n         numbers = 1:9)\n\n# A tibble: 9 × 4\n     id items satisfaction numbers\n  <dbl> <dbl> <lgl>          <int>\n1     2    10 NA                 1\n2     3    18 NA                 2\n3     4    21 NA                 3\n4     4    23 NA                 4\n5     5     9 NA                 5\n6     5    11 NA                 6\n7     6    11 NA                 7\n8     6    12 NA                 8\n9     7     3 NA                 9\n\n# assign back to tibble\norders_B <- orders_B %>%\n              mutate(satisfaction = NA,\n                     numbers = 1:9)\norders_B %>%\n  mutate(numbers_as_strings = as.character(numbers))\n\n# A tibble: 9 × 5\n     id items satisfaction numbers numbers_as_strings\n  <dbl> <dbl> <lgl>          <int> <chr>             \n1     2    10 NA                 1 1                 \n2     3    18 NA                 2 2                 \n3     4    21 NA                 3 3                 \n4     4    23 NA                 4 4                 \n5     5     9 NA                 5 5                 \n6     5    11 NA                 6 6                 \n7     6    11 NA                 7 7                 \n8     6    12 NA                 8 8                 \n9     7     3 NA                 9 9                 \n\norders_B %>%\n  mutate(items_minus_id = items - id)\n\n# A tibble: 9 × 5\n     id items satisfaction numbers items_minus_id\n  <dbl> <dbl> <lgl>          <int>          <dbl>\n1     2    10 NA                 1              8\n2     3    18 NA                 2             15\n3     4    21 NA                 3             17\n4     4    23 NA                 4             19\n5     5     9 NA                 5              4\n6     5    11 NA                 6              6\n7     6    11 NA                 7              5\n8     6    12 NA                 8              6\n9     7     3 NA                 9             -4"
  },
  {
    "objectID": "posts/Week 8/index.html#dplyr-filter",
    "href": "posts/Week 8/index.html#dplyr-filter",
    "title": "Data relations",
    "section": "Dplyr filter",
    "text": "Dplyr filter\n\nfull_data <- full_join(customers, orders, by = \"id\")\n\nWarning in full_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nfull_data\n\n# A tibble: 10 × 4\n      id city       postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3\n\nfull_data %>%\n  filter(items > 10)\n\n# A tibble: 6 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     3 <NA>      <NA>        18\n2     4 Aberlour  AB38 7RY    21\n3     4 Aberlour  AB38 7RY    23\n4     5 Tobermory PA75 6NR    11\n5     6 <NA>      <NA>        11\n6     6 <NA>      <NA>        12\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\")\n\n# A tibble: 2 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    21\n2     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\" & items > 21)\n\n# A tibble: 1 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\",\n         items > 21)\n\n# A tibble: 1 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(city != \"Aberlour\")\n\n# A tibble: 4 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     2 Dufftown   AB55 4DH    10\n3     5 Tobermory  PA75 6NR     9\n4     5 Tobermory  PA75 6NR    11\n\nfull_data %>%\n  filter( is.na(city) == FALSE,\n          is.na(items) == FALSE)\n\n# A tibble: 5 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     4 Aberlour  AB38 7RY    21\n3     4 Aberlour  AB38 7RY    23\n4     5 Tobermory PA75 6NR     9\n5     5 Tobermory PA75 6NR    11\n\nfull_data %>%\n  filter( is.na(city) == TRUE | is.na(items) == TRUE)\n\n# A tibble: 5 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     3 <NA>       <NA>        18\n3     6 <NA>       <NA>        11\n4     6 <NA>       <NA>        12\n5     7 <NA>       <NA>         3"
  },
  {
    "objectID": "posts/Week 6/index.html",
    "href": "posts/Week 6/index.html",
    "title": "Data Summaries: Week",
    "section": "",
    "text": "Download the ncod_tweets.rds file from the link in the textbook. Put the file in the directory for your post. Then load it.\n\ntweets <- readRDS(\"ncod_tweets.rds\")"
  },
  {
    "objectID": "posts/Week 6/index.html#summarise",
    "href": "posts/Week 6/index.html#summarise",
    "title": "Data Summaries: Week",
    "section": "5.2 Summarise",
    "text": "5.2 Summarise\nThis is a function from the dplyr package.\n\nlibrary(tidyverse) #loads dplyr as well\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nfavourite_summary <- summarise(tweets, # name of the data table\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count))\nknitr::kable(favourite_summary) #print output\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\n\n\n\n\n29.71732\n3\n0\n22935\n\n\n\n\n\nWe can add as many new functions as we want. Each one will apply a function of choice to the named column.\nFor example, if wanted the standard deviation of the values in the column named favorite_count, then we added sd_favs = sd(favorite_count).\n\nfavourite_summary <- summarise(tweets,\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count),\n                           sd_favs = sd(favorite_count),\n                           mean_RTs = mean(retweet_count),\n                           median_RTs = median(retweet_count),\n                           min_RTs = min(retweet_count),\n                           max_RTs = max(retweet_count),\n                           sd_RTs = sd(favorite_count))\nknitr::kable(favourite_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\nsd_favs\nmean_RTs\nmedian_RTs\nmin_RTs\nmax_RTs\nsd_RTs\n\n\n\n\n29.71732\n3\n0\n22935\n329.9982\n3.166632\n0\n0\n2525\n329.9982\n\n\n\n\n\nExample of plotting a histogram of the favorite counts, in log scale.\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\nAnother example of adding individual functions to summarise.\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(), # count all rows\n            min_date = min(created_at), # find the minimum date\n            max_date = max(created_at)) # find the maximum date\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\nExample of writing inline code.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nThere were 28626 tweets between 10 October, 2021 and 12 October, 2021."
  },
  {
    "objectID": "posts/Week 6/index.html#pipes",
    "href": "posts/Week 6/index.html#pipes",
    "title": "Data Summaries: Week",
    "section": "5.3.2 Pipes",
    "text": "5.3.2 Pipes\nExample of using the pipe operate syntax %>%.\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/Week 6/index.html#counting",
    "href": "posts/Week 6/index.html#counting",
    "title": "Data Summaries: Week",
    "section": "5.4 Counting",
    "text": "5.4 Counting\nThe count function counts the number of times each unique item occurs in a column. This is an example appplied to the screen_name column, which contains twitter usernames.\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/Week 6/index.html#grouping",
    "href": "posts/Week 6/index.html#grouping",
    "title": "Data Summaries: Week",
    "section": "5.5 Grouping",
    "text": "5.5 Grouping\nTwo ways to use the group_by function. Here we produce summaries for each level in the verified column.\n\ntweets_grouped <- tweets %>%\n  group_by(verified)\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282\n\n\n\n\n\n\nverified <- tweets %>%\n  group_by(verified) %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282"
  },
  {
    "objectID": "posts/Week 9/index.html",
    "href": "posts/Week 9/index.html",
    "title": "Data relations",
    "section": "",
    "text": "Chapter 6 Practice Report"
  },
  {
    "objectID": "posts/Week 9/index.html#number-of-reviews-by-year",
    "href": "posts/Week 9/index.html#number-of-reviews-by-year",
    "title": "Data relations",
    "section": "Number of reviews by year",
    "text": "Number of reviews by year\nThe below histogram shows the number of video game reviews submitted to Amazon by year. From 1999 reviews largely increased year-on-year which is unsurprising given the growth of Amazon and access to the internet. The dataset shows the peak number of reviews was 2015 with a decline from 2016 to 2018. It is likely that this reflects the dataset being incomplete for recent years rather than the number of reviews declining in reality."
  },
  {
    "objectID": "posts/Week 9/index.html#verified-users",
    "href": "posts/Week 9/index.html#verified-users",
    "title": "Data relations",
    "section": "Verified users",
    "text": "Verified users\nThe dataset contains details of whether the review was based on a verified purchase. From Amazon Community:\n\nAn “Amazon Verified Purchase” review means that we’ve verified that the person writing the review purchased the product from Amazon, and didn’t receive the product at a big discount. Reviews that are not marked “Amazon Verified Purchase” are valuable as well, but, either we cannot confirm that the product was purchased from Amazon, or that the customer paid a price that is available to most Amazon shoppers.\n\nTable 1 shows the number of reviews based on verified and unverified purchases.\n\n\n\n\nTable 1: Number of reviews by purchase status\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645\n\n\n\n\n\n\nWhilst the number of verified reviews is substantially larger than the number of unverified reviews, the below histogram demonstrates that this has not been a consistent trend and that the large increase in the number of reviews is largely driven by an increase in verified reviews.\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Week 9/index.html#overall",
    "href": "posts/Week 9/index.html#overall",
    "title": "Data relations",
    "section": "Overall",
    "text": "Overall\nAmazon review ratings are provided on a scale of 1 (worst) to 5 (best) stars. The histogram below shows the total number of reviews assigned each rating."
  },
  {
    "objectID": "posts/Week 9/index.html#by-purchase-status",
    "href": "posts/Week 9/index.html#by-purchase-status",
    "title": "Data relations",
    "section": "By purchase status",
    "text": "By purchase status\nHowever, if you break this data down by verified purchases status you can see that whilst the number of verified and unverified reviews with 1 to 4 star reviews are similar, there is a very large number of 5 star reviews for verified purchases compared to unverified purchases.\n\n#Get number of reviews per year\n\nrating_by_verified_counts <- review_data %>%\n  group_by(rating,verified) %>%\n  summarize(counts = n())\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument.\n\n#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))\n#ggplot(reviews_by_year, aes(x=year, y=counts))\n\n# plot\nggplot(data = rating_by_verified_counts, \n       mapping = aes(x=rating, \n                     y=counts, \n                     group = verified,\n                     fill = verified))+\n  geom_bar(stat= \"identity\", position = \"dodge\")+\n  xlab(\"\")+\n  ylab(\"\")+\n  ggtitle(\"Review Ratings\",\n          subtitle = \"By purchase status\")+\n  theme(\n    panel.background = element_rect(fill = \"lightgrey\",\n                                colour = \"lightgrey\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/Week 9/index.html#by-purchase-status-1",
    "href": "posts/Week 9/index.html#by-purchase-status-1",
    "title": "Data relations",
    "section": "By purchase status",
    "text": "By purchase status\nAverage ratings for verified reviews were higher (both mean and median) than for unverified review, likely driven by the number of 5-star reviews for verified reviews.\n\n\n\n\nTable 2: Average ratings by purchase status\n\n\nVerified\nMean rating\nMedian rating\n\n\n\n\nFALSE\n3.91\n4\n\n\nTRUE\n4.37\n5"
  },
  {
    "objectID": "posts/Week 9/index.html#by-year-and-purchase-status",
    "href": "posts/Week 9/index.html#by-year-and-purchase-status",
    "title": "Data relations",
    "section": "By year and purchase status",
    "text": "By year and purchase status\nAverage ratings for verified purchases tended to increase over time, while average ratings for unverified purchases tended to decrease over time.\n\nyear_rating_status <- review_data %>%\n  group_by(year,verified) %>%\n  summarise(mean_rating = mean(rating),.groups = 'drop')\n\n# plot\nggplot(data = year_rating_status, \n       mapping = aes(x=year, \n                     y=mean_rating, \n                     group = verified,\n                     color = verified))+\n  geom_line()+\n  geom_point()+\n  scale_x_continuous(breaks = 1999:2018)+\n  scale_color_manual(values = c('#1b9e77','#d95f02'))+\n  theme(axis.text.x = element_text(angle = 85, vjust = 1, hjust=1))+\n  xlab(\"\")+\n  ylab(\"\")+\n  ggtitle(\"Average Ratings\",\n          subtitle = \"By year and purchase status\")+\n  theme(\n    panel.background = element_rect(fill = \"lightgrey\",\n                                colour = \"lightgrey\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/Week 11/index.html",
    "href": "posts/Week 11/index.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "This post discusses essential functions from the dplyr package. These include: select, filter, arrange, mutate, summarize, and group_by. In you blog post demonstrate that you understand and can use each of these functions."
  },
  {
    "objectID": "posts/Week 11/index.html#select",
    "href": "posts/Week 11/index.html#select",
    "title": "Data Wrangling",
    "section": "Select",
    "text": "Select\n\n# select single column by name\nproduct_dat <- budget %>% \n  select(product) \n\n# select single column by number\nproduct_dat <- budget %>% select(2) \n\n# select single column by number\nproduct_dat <- budget %>% select(2,3) \n\n\n#print columns 2 and 3\nbudget %>% select(2,3)\n\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n\n\n\nproduct_dat <- budget %>% select(2) \nproduct_dat\n\n# A tibble: 8 × 1\n  product\n  <chr>  \n1 widgets\n2 gadgets\n3 widgets\n4 gadgets\n5 widgets\n6 gadgets\n7 widgets\n8 gadgets\n\n\n\nproduct_dat <- budget %>% select(2,3) \nknitr::kable(product_dat)\n\n\n\n\nproduct\nsales_2019\n\n\n\n\nwidgets\n2129\n\n\ngadgets\n723\n\n\nwidgets\n1123\n\n\ngadgets\n2022\n\n\nwidgets\n-728\n\n\ngadgets\n-423\n\n\nwidgets\n633\n\n\ngadgets\n1204\n\n\n\n\n\n\n( product_dat <- budget %>% select(2,3) )\n\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n\n\n\ncolon notation\n\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\nsales2019\n\n# A tibble: 8 × 3\n  region product sales_2019\n  <chr>  <chr>        <dbl>\n1 North  widgets       2129\n2 North  gadgets        723\n3 South  widgets       1123\n4 South  gadgets       2022\n5 East   widgets       -728\n6 East   gadgets       -423\n7 West   widgets        633\n8 West   gadgets       1204\n\n# select columns with colon\nyears <- budget %>% select(3:7)\nyears <- budget %>% select(sales_2019:satisfaction_2020)\n\n\n\nUNSELECT\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n\n\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))"
  },
  {
    "objectID": "posts/Week 11/index.html#filter",
    "href": "posts/Week 11/index.html#filter",
    "title": "Data Wrangling",
    "section": "FILTER",
    "text": "FILTER\n\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# everything but the North\nbudget %>% filter(region != \"North\")\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n\n\nin\n\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\na <- c(1,2,3,4,5)\n\n6 %in% a\n\n[1] FALSE\n\n1 %in% a\n\n[1] TRUE\n\nif(1 %in% a == TRUE) {\n  \"yes\"\n}\n\n[1] \"yes\"\n\nif(6 %in% a == FALSE) {\n  \"yes\"\n}\n\n[1] \"yes\"\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nwhich(letters %in% \"g\", arr.ind = TRUE)\n\n[1] 7"
  },
  {
    "objectID": "posts/Week 11/index.html#arrange",
    "href": "posts/Week 11/index.html#arrange",
    "title": "Data Wrangling",
    "section": "arrange",
    "text": "arrange\n\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\nbudget %>%\n  arrange(product, region)\n\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 East   gadgets       -423       -354            94        2036 neutral high   \n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  gadgets       2022       -945          -610         200 low     low    \n4 West   gadgets       1204        426           433        -136 low     low    \n5 East   widgets       -728        -51          -801        -342 very l… very l…\n6 North  widgets       2129       -517           822        -897 high    very h…\n7 South  widgets       1123      -1450          1004         672 high    neutral\n8 West   widgets        633        790           783        -315 neutral neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/Week 10/index.html",
    "href": "posts/Week 10/index.html",
    "title": "Data Tidying",
    "section": "",
    "text": "untidy_data <- read_csv(\"tidy_data.csv\", show_col_types = FALSE)\nkable(untidy_data)\n\n\n\n\ncustomer_id\nyear\nitems\nprice_per_item\ntotalprice\n\n\n\n\n1\n2018\n2\n3.91\n7.82\n\n\n1\n2019\n8\n4.72\n37.76\n\n\n1\n2020\n10\n5.59\n55.90\n\n\n2\n2018\n1\n3.91\n3.91\n\n\n2\n2019\n6\n4.72\n28.32\n\n\n2\n2020\n1\n5.59\n5.59\n\n\n3\n2018\n4\n3.91\n15.64\n\n\n3\n2019\n5\n4.72\n23.60\n\n\n3\n2020\n5\n5.59\n27.95\n\n\n4\n2018\n10\n3.91\n39.10\n\n\n4\n2019\n1\n4.72\n4.72\n\n\n4\n2020\n3\n5.59\n16.77\n\n\n5\n2018\n3\n3.91\n11.73\n\n\n5\n2019\n9\n4.72\n42.48\n\n\n5\n2020\n8\n5.59\n44.72\n\n\n\n\n\n\ntidy_data <- read_csv(\"tidy_data.csv\", show_col_types = FALSE)\nkable(tidy_data)\n\n\n\n\ncustomer_id\nyear\nitems\nprice_per_item\ntotalprice\n\n\n\n\n1\n2018\n2\n3.91\n7.82\n\n\n1\n2019\n8\n4.72\n37.76\n\n\n1\n2020\n10\n5.59\n55.90\n\n\n2\n2018\n1\n3.91\n3.91\n\n\n2\n2019\n6\n4.72\n28.32\n\n\n2\n2020\n1\n5.59\n5.59\n\n\n3\n2018\n4\n3.91\n15.64\n\n\n3\n2019\n5\n4.72\n23.60\n\n\n3\n2020\n5\n5.59\n27.95\n\n\n4\n2018\n10\n3.91\n39.10\n\n\n4\n2019\n1\n4.72\n4.72\n\n\n4\n2020\n3\n5.59\n16.77\n\n\n5\n2018\n3\n3.91\n11.73\n\n\n5\n2019\n9\n4.72\n42.48\n\n\n5\n2020\n8\n5.59\n44.72\n\n\n\n\n\n\ntidy_data_2 <- read_csv(file = \"untidy_data.csv\",\n                      show_col_types = FALSE) %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)"
  },
  {
    "objectID": "posts/Week 11/index.html#mutate",
    "href": "posts/Week 11/index.html#mutate",
    "title": "Data Wrangling",
    "section": "mutate",
    "text": "mutate\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\n\nbudget3 <- budget %>%\n  mutate(\n    A = 1,\n    B = 1:8,\n    C = mean(1:8),\n    D = c(1,2,1,2,1,2,1,2),\n    E = rep(1:2,4)\n  )\n\nMutate with logic operators\n\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n\nUsing case_when\n\nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n\n\n# create a column where people get a bonus if customer satisfaction was overall high or very high\n\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(\n    satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n    satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\")\n    )\n\n\n# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned\n\nbonus2 <- budget3 %>%\n  mutate(bonus_2020 = case_when(satisfaction_2020 == \"high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                satisfaction_2020 == \"very high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                TRUE ~ \"No bonus\")) # set all other values to \"no bonus\""
  },
  {
    "objectID": "posts/Week 11/index.html#summarise",
    "href": "posts/Week 11/index.html#summarise",
    "title": "Data Wrangling",
    "section": "summarise",
    "text": "summarise\n\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\n\nhead(budget4) # check the format\n\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n\n\n\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390"
  },
  {
    "objectID": "posts/Week 11/index.html#group_by",
    "href": "posts/Week 11/index.html#group_by",
    "title": "Data Wrangling",
    "section": "group_by",
    "text": "group_by\n\nyear_prod <- budget4 %>%\n  group_by(year, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\nregion_prod <- budget4 %>%\n  group_by(region, product) %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  ) %>%\n  ungroup()\n\n`summarise()` has grouped output by 'region'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "posts/Week 12/index.html",
    "href": "posts/Week 12/index.html",
    "title": "Example Final",
    "section": "",
    "text": "The purpose of this study was to determine whether standing up versus sitting down influences selective attention abilities [@rosenbaum2017stand].\nThe experiment involved a classic test of selective attention, called the Stroop effect [@stroop1935]. In a typical Stroop experiment, subjects name the ink color of words as fast as they can. On congruent trials the color and word match; and, on incongruent trial the color and word mismatch. For a review of the Stroop effect see @macleod1991.\n\n\n\n\n\nThe Stroop effect is the finding that reaction times are typically faster and more accurate on congruent compared to incongruent trials.\nThe Stroop effect could measure aspects of selective attention, or the ability to ignore distracting information. Selectively ignoring word information while attending to color information should cause smaller Stroop effects.\nIn the present study the researchers were interested in whether Stroop effects would be smaller in a condition when participants were standing up compared to sitting down. The general hypothesis was that standing up should improve selective attention abilities compared to sitting down, and this improvement would be detected in a smaller Stroop effect.\n\n\n\nThe authors have made their data available here https://osf.io/uwzsb/.\n\n\n\nThis final project will attempt to reproduce Figure 1 from the paper. The original figure 1 is shown below:\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n# load data\nall_data <- rio::import(\"stroop_stand.csv\")\n\n# pre-process data\n\n# make wide data longer\ntransformed_data <- all_data %>%\n  mutate( subject = 1:dim(all_data)[1] ) %>%\n  pivot_longer(!subject,\n               names_to = c(\"congruency\",\"posture\"),\n               names_sep = \"_\",\n               values_to = \"RT\")\n\n# get means in each condition\n\nplot_means <- transformed_data %>%\n            group_by(congruency,posture) %>%\n            summarise(mean_RT = mean(RT),\n                      SEM = sd(RT)/sqrt(length(RT)),\n                      .groups = \"drop\")\n\nggplot(plot_means, aes(x=posture, \n                       y=mean_RT, \n                       group=congruency, \n                       fill=congruency))+\n  geom_bar(stat=\"identity\", position=\"dodge\")+\n  geom_errorbar(aes(ymin=mean_RT-SEM, ymax=mean_RT+SEM), \n                position=position_dodge(width=0.9),\n                width=.2)+\n  theme_classic()+\n  scale_y_continuous(breaks=seq(500,1000,50))+\n  coord_cartesian(ylim=c(500,1000))+\n  ylab(\"Response Time (ms)\")+\n  xlab(\"Posture\")\n\n\n\n\n\n\n\nThis final project shows a successful attempt to reproduce the results from experiment 3 reported by @rosenbaum2017stand. The above graph shows the same pattern of data as reported by the authors. The main finding was that the Stroop effect, or difference in reaction time between incongruent and congruent conditions was larger in the sitting posture condition compared to the standing posture condition. This finding was consistent with the hypothesis that standing improves selective attention which caused a reduction in the Stroop effect"
  },
  {
    "objectID": "posts/Week 13/index.html#quarto-guide-to-slide-decks",
    "href": "posts/Week 13/index.html#quarto-guide-to-slide-decks",
    "title": "Making Slides",
    "section": "Quarto guide to slide decks",
    "text": "Quarto guide to slide decks\nUsing Revealjs\nhttps://quarto.org/docs/presentations/revealjs/"
  },
  {
    "objectID": "posts/Week 13/index.html#getting-up",
    "href": "posts/Week 13/index.html#getting-up",
    "title": "Making Slides",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "posts/Week 13/index.html#going-to-sleep",
    "href": "posts/Week 13/index.html#going-to-sleep",
    "title": "Making Slides",
    "section": "Going to sleep",
    "text": "Going to sleep\n\n\nGet in bed\nCount sheep"
  },
  {
    "objectID": "posts/Week 13/index.html#fenced-divs",
    "href": "posts/Week 13/index.html#fenced-divs",
    "title": "Making Slides",
    "section": "fenced divs",
    "text": "fenced divs\n\nsome text"
  },
  {
    "objectID": "posts/Week 13/index.html#slide-with-a-pause",
    "href": "posts/Week 13/index.html#slide-with-a-pause",
    "title": "Making Slides",
    "section": "Slide with a pause",
    "text": "Slide with a pause\ncontent before the pause\n\ncontent after the pause"
  },
  {
    "objectID": "posts/Week 13/index.html#multi-column",
    "href": "posts/Week 13/index.html#multi-column",
    "title": "Making Slides",
    "section": "multi-column",
    "text": "multi-column\n\n\nPut stuff in here\n\n\nstuff\nstuff\nstuff"
  },
  {
    "objectID": "posts/Week 13/index.html#slide-with-speaker-notes",
    "href": "posts/Week 13/index.html#slide-with-speaker-notes",
    "title": "Making Slides",
    "section": "Slide with speaker notes",
    "text": "Slide with speaker notes\nSlide content\n\nSpeaker notes go here."
  },
  {
    "objectID": "posts/Week 13/index.html#r-code",
    "href": "posts/Week 13/index.html#r-code",
    "title": "Making Slides",
    "section": "R code",
    "text": "R code\n\nhist(cars$speed)"
  },
  {
    "objectID": "posts/Week 13/index.html#slide-title",
    "href": "posts/Week 13/index.html#slide-title",
    "title": "Making Slides",
    "section": "Slide Title",
    "text": "Slide Title"
  },
  {
    "objectID": "posts/Week 13/index.html#cool-website",
    "href": "posts/Week 13/index.html#cool-website",
    "title": "Making Slides",
    "section": "Cool website",
    "text": "Cool website"
  },
  {
    "objectID": "posts/Week 13/index.html#section",
    "href": "posts/Week 13/index.html#section",
    "title": "Making Slides",
    "section": "",
    "text": "Pretending I’m Not Going Insane Haha"
  },
  {
    "objectID": "posts/Week 13/index.html#section-1",
    "href": "posts/Week 13/index.html#section-1",
    "title": "Making Slides",
    "section": "",
    "text": "Insane But at Least I’m Passing"
  },
  {
    "objectID": "posts/Week 13/index.html#section-2",
    "href": "posts/Week 13/index.html#section-2",
    "title": "Making Slides",
    "section": "",
    "text": "count\ndown\nto\nthe\nend"
  },
  {
    "objectID": "posts/Week 13/index.html#section-3",
    "href": "posts/Week 13/index.html#section-3",
    "title": "Making Slides",
    "section": "",
    "text": "and\nhere\nwe\nare\n!!"
  },
  {
    "objectID": "posts/Week 13/index.html",
    "href": "posts/Week 13/index.html",
    "title": "Making Slides",
    "section": "",
    "text": "https://quarto.org/docs/presentations/revealjs/"
  },
  {
    "objectID": "posts/Week 13/index.html#semester-begins",
    "href": "posts/Week 13/index.html#semester-begins",
    "title": "Making Slides",
    "section": "Semester Begins",
    "text": "Semester Begins\n\nFeel confident\nStay up to date"
  },
  {
    "objectID": "posts/Week 13/index.html#first-midterm",
    "href": "posts/Week 13/index.html#first-midterm",
    "title": "Making Slides",
    "section": "First Midterm",
    "text": "First Midterm\n\n\nDamn that was rough\nLets try again"
  },
  {
    "objectID": "posts/Week 13/index.html#what-now",
    "href": "posts/Week 13/index.html#what-now",
    "title": "Making Slides",
    "section": "What Now?",
    "text": "What Now?\n\nIs this burn out yet"
  },
  {
    "objectID": "posts/Week 13/index.html#not-yet",
    "href": "posts/Week 13/index.html#not-yet",
    "title": "Making Slides",
    "section": "Not Yet",
    "text": "Not Yet\nThis is just the begininng\n\nIt gets worse"
  },
  {
    "objectID": "posts/Week 13/index.html#try-to-regain-control",
    "href": "posts/Week 13/index.html#try-to-regain-control",
    "title": "Making Slides",
    "section": "Try to Regain Control",
    "text": "Try to Regain Control\n\n\nMake more lists\n\n\nstudy times\nleisure times\nmore study times"
  },
  {
    "objectID": "posts/Week 13/index.html#midterm-two",
    "href": "posts/Week 13/index.html#midterm-two",
    "title": "Making Slides",
    "section": "Midterm two",
    "text": "Midterm two\nOh no, here we go again\n\nWell I guess thats that huh?"
  },
  {
    "objectID": "posts/Week 13/index.html#nope-we-keep-going",
    "href": "posts/Week 13/index.html#nope-we-keep-going",
    "title": "Making Slides",
    "section": "Nope We Keep Going",
    "text": "Nope We Keep Going\n\nhist(cars$speed)"
  },
  {
    "objectID": "posts/Week 13/index.html#a-break-for-mental-health",
    "href": "posts/Week 13/index.html#a-break-for-mental-health",
    "title": "Making Slides",
    "section": "A Break For Mental Health",
    "text": "A Break For Mental Health"
  },
  {
    "objectID": "posts/Week 13/index.html#a-website-for-creative-block",
    "href": "posts/Week 13/index.html#a-website-for-creative-block",
    "title": "Making Slides",
    "section": "A Website For Creative Block",
    "text": "A Website For Creative Block"
  }
]