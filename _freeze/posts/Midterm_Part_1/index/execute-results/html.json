{
  "hash": "6597bb5470e231796614caabccbf6e93",
  "result": {
    "markdown": "---\ntitle: \"Basic Skills\"\nauthor: \"Noon Elsaeyed\"\ndate: \"2023-03-30\"\ncategories: [skills]\n---\n\n\n### Demonstration\n\nDemonstrate your ability to use these basic programming concepts in R.\n\nQuestion 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a character object\nmy_string <- \"Hi Professor Crump!\"\nprint(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hi Professor Crump!\"\n```\n:::\n\n```{.r .cell-code}\n# Create a numeric object\nmy_age <- 23\nprint(my_age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\n# Create an integer object\nnumber_one_prof <- 1L\nprint(number_one_prof)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Create a logical object\nthe_best_prof <- TRUE\nprint(the_best_prof)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Create a data frame\nmy_dataframe <- data.frame(x = c(1, 2, 3), y = c(\"a\", \"b\", \"c\"))\nprint(my_dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 a\n2 2 b\n3 3 c\n```\n:::\n\n```{.r .cell-code}\n# Create a list\nmy_list <- list(a = 1, b = \"love RStudio\", c = TRUE)\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1\n\n$b\n[1] \"love RStudio\"\n\n$c\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Indexing objects\n# Index a character object\nprint(my_string[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hi Professor Crump!\"\n```\n:::\n\n```{.r .cell-code}\n# Change an element of a list\nmy_list[[2]] <- \"Sike\"\nprint(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1\n\n$b\n[1] \"Sike\"\n\n$c\n[1] TRUE\n```\n:::\n:::\n\nQuestion 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if two numbers are equal\n1 == 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Output: FALSE\n\n1== 1.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Output: TRUE\n\n# Check if a number is greater than or equal to another number\n5 >= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Output: TRUE\n\n7<= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Output: FALSE\n\n# Check if a character string is not equal to another string\n\"Hi\" != \"Professor\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# Output: TRUE\n\n\"You Rock\" != \"You Rock\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Output: FALSE\n\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n#> [1] FALSE\n\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#> [1] TRUE\n```\n:::\n\n\nQuestion 3:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"Psych Rules\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n[1] \"Psych Rules\"\n```\n:::\n:::\n\nQuestion 4:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function that takes two arguments and returns their sum\nmy_function_example <- function(x, y) {\n  return(x + y)\n}\n\n# Call the function with two arguments\nresult <- my_function_example(9, 10)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 19\n```\n:::\n\n```{.r .cell-code}\n# Output: 7\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}