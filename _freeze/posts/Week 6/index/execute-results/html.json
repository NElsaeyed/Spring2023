{
  "hash": "40a8563eb1b5c0c6ec12c64a47796c38",
  "result": {
    "markdown": "---\ntitle: \"Data Summaries: Week \"\nauthor: \"Noon Elsaeyed\"\ndate: \"2023-03-15\"\ncategories: [skills,tips]\n---\n\n\n## 5.1 set-up\n\nDownload the `ncod_tweets.rds` file from the link in the textbook. Put the file in the directory for your post. Then load it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets <- readRDS(\"ncod_tweets.rds\")\n```\n:::\n\n\n## 5.2 Summarise\n\nThis is a function from the dplyr package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #loads dplyr as well\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nfavourite_summary <- summarise(tweets, # name of the data table\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count))\nknitr::kable(favourite_summary) #print output\n```\n\n::: {.cell-output-display}\n| mean_favs| median_favs| min_favs| max_favs|\n|---------:|-----------:|--------:|--------:|\n|  29.71732|           3|        0|    22935|\n:::\n:::\n\n\nWe can add as many new functions as we want. Each one will apply a function of choice to the named column.\n\nFor example, if wanted the standard deviation of the values in the column named `favorite_count`, then we added `sd_favs = sd(favorite_count)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfavourite_summary <- summarise(tweets,\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count),\n                           sd_favs = sd(favorite_count),\n                           mean_RTs = mean(retweet_count),\n                           median_RTs = median(retweet_count),\n                           min_RTs = min(retweet_count),\n                           max_RTs = max(retweet_count),\n                           sd_RTs = sd(favorite_count))\nknitr::kable(favourite_summary)\n```\n\n::: {.cell-output-display}\n| mean_favs| median_favs| min_favs| max_favs|  sd_favs| mean_RTs| median_RTs| min_RTs| max_RTs|   sd_RTs|\n|---------:|-----------:|--------:|--------:|--------:|--------:|----------:|-------:|-------:|--------:|\n|  29.71732|           3|        0|    22935| 329.9982| 3.166632|          0|       0|    2525| 329.9982|\n:::\n:::\n\n\nExample of plotting a histogram of the favorite counts, in log scale.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nAnother example of adding individual functions to summarise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(), # count all rows\n            min_date = min(created_at), # find the minimum date\n            max_date = max(created_at)) # find the maximum date\nglimpse(tweet_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n```\n:::\n:::\n\n\nExample of writing inline code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n```\n:::\n\n\nThere were 28626 tweets between 10 October, 2021 and 12 October, 2021.\n\n## 5.3.2 Pipes\n\nExample of using the pipe operate syntax `%>%`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\nhead(tweets_per_user)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23\n```\n:::\n:::\n\n\n## 5.4 Counting\n\nThe count function counts the number of times each unique item occurs in a column. This is an example appplied to the `screen_name` column, which contains twitter usernames.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\nhead(tweets_per_user)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23\n```\n:::\n:::\n\n\n## 5.5 Grouping\n\nTwo ways to use the `group_by` function. Here we produce summaries for each level in the `verified` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntweets_grouped <- tweets %>%\n  group_by(verified)\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\nknitr::kable(verified)\n```\n\n::: {.cell-output-display}\n|verified | count| mean_favs| mean_retweets|\n|:--------|-----:|---------:|-------------:|\n|FALSE    | 26676|  18.40576|      1.825649|\n|TRUE     |  1950| 184.45949|     21.511282|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nverified <- tweets %>%\n  group_by(verified) %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\nknitr::kable(verified)\n```\n\n::: {.cell-output-display}\n|verified | count| mean_favs| mean_retweets|\n|:--------|-----:|---------:|-------------:|\n|FALSE    | 26676|  18.40576|      1.825649|\n|TRUE     |  1950| 184.45949|     21.511282|\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}