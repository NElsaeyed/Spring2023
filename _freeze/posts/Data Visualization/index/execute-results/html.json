{
  "hash": "d0880e5e56fac7990602164b108bbead",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Noon Elsaeyed\"\ndate: \"2023-02-21\"\ncategories: [skills,tips]\n---\n\n\n### Week Four: Data Visaulization\n\n-   Data types: Show that you understand what is available to you in R. Note also, this goal overlaps with part of the midterm project. See the appendix on Data Types in the textbook for help. Write notes and R code chunks to demonstrate your knowledge\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# type of numeric data\ntypeof(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\n# if you want to know if something is numeric (a double or an integer), you can use the function is.numeric() and it will tell you if it is numeric (TRUE) or not (FALSE).\nis.numeric(10L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(10.0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(\"Text\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# Characters (also called “strings”) are any text between quotation marks.\ntypeof(\"This is a character string\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof('You can use double or single quotes')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# This can include quotes, but you have to escape quotes using a backslash to signal that the quote isn’t meant to be the end of the string.\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\n# cat() prints the arguments\n\ncat(my_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe instructor said, \"R is cool,\" and the class agreed.\n```\n:::\n\n```{.r .cell-code}\n# Logical data (also sometimes called “Boolean” values) is one of two values: true or false. In R, we always write them in uppercase: TRUE and FALSE.\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign 1 to the object named a\na <- 1\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# make a vector with a thing in it\na_thing <- 1\nanother_thing <- c(1,2)\nmany_things <- c(1:10)\n\n# these are all now objects in the environment\n```\n:::\n\n\n\n-   Tidy Data: Show that you understand what this means. Give an example of data this is in tidy format, and data that is not.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load ggplot2 and some sample datasets\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\n# the starwars data is loaded by tidyverse\n#assign the starwars dataset to a variable (object) name\nstarwars_copy<- starwars\n\n# check out some of the data types\nhead(starwars_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$name) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nstarwars_copy$sex\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"male\"           \"none\"           \"none\"           \"male\"          \n [5] \"female\"         \"male\"           \"female\"         \"none\"          \n [9] \"male\"           \"male\"           \"male\"           \"male\"          \n[13] \"male\"           \"male\"           \"male\"           \"hermaphroditic\"\n[17] \"male\"           \"male\"           \"male\"           \"male\"          \n[21] \"male\"           \"none\"           \"male\"           \"male\"          \n[25] \"male\"           \"male\"           \"female\"         \"male\"          \n[29] \"male\"           \"male\"           \"male\"           \"male\"          \n[33] \"male\"           \"male\"           \"male\"           \"male\"          \n[37] NA               \"male\"           \"male\"           NA              \n[41] \"female\"         \"male\"           \"male\"           \"female\"        \n[45] \"male\"           \"male\"           \"male\"           \"male\"          \n[49] \"male\"           \"male\"           \"male\"           \"female\"        \n[53] \"male\"           \"male\"           \"male\"           \"male\"          \n[57] \"male\"           \"female\"         \"male\"           \"male\"          \n[61] \"female\"         \"female\"         \"female\"         \"male\"          \n[65] \"male\"           \"male\"           \"female\"         \"male\"          \n[69] \"male\"           \"female\"         \"female\"         \"male\"          \n[73] \"none\"           \"male\"           \"male\"           \"female\"        \n[77] \"male\"           \"male\"           \"male\"           NA              \n[81] \"male\"           \"male\"           \"female\"         \"male\"          \n[85] \"none\"           NA               \"female\"        \n```\n:::\n\n```{.r .cell-code}\nis.numeric(starwars$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.numeric(starwars$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ntypeof(starwars$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(starwars$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(starwars_copy$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\n# plot some variables\n```\n:::\n\n\n-   ggplot2: We will continue learning about this across the semester. Show at a minimum that you can make a graph and add it to your blog. Try examples from the textbook. Show that you understand the layer concept. Identify aspects that are confusing to you so we can discuss them in class\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make a data frame (table)\nmy_df <- data.frame(a = 1:5, b = c(\"one\",\"two\",\"three\",\"four\",\"five\"), random = runif(5,0,1))\n\n# access columns and rows with $ and []\nmy_df$a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df$random\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.05193465 0.23614238 0.38983457 0.87775319 0.93500799\n```\n:::\n\n```{.r .cell-code}\nmy_df[1,] # row 1, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b     random\n1 1 one 0.05193465\n```\n:::\n\n```{.r .cell-code}\nmy_df[,1] # column 1, all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,] # rows 1 and 2, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b     random\n1 1 one 0.05193465\n2 2 two 0.23614238\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,3] # rows 1 and 2, only column 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.05193465 0.23614238\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# load some sample data\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot() # blank canvas\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = survey_data, mapping = aes(x = wait_time, y = satisfaction)) # data to pull from and assigning axis \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# ggplot(survey_data, aes(x = wait_time, y = satisfaction)) shortened version of the same thing\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +      # the plus sign signals more info/layers\n  geom_point() # scatter plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = satisfaction)) +\n  geom_point(color=\"black\", size=1) +\n  geom_point(color=\"#afa0e8\", size=0.5) + # use color name or hex number\n  geom_smooth() + \n  geom_smooth(method =\"lm\") # lm stands for linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-4.png){width=672}\n:::\n:::\n\n\n![](DataVis.jpg)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}