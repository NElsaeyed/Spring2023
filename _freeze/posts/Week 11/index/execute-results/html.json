{
  "hash": "c1e38c50e1e3386b61c73588231e1e98",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling\"\nauthor: \"Noon Elsaeyed\"\ndate: \"4/05/23\"\n---\n\n\nThis post discusses essential functions from the dplyr package. These include: select, filter, arrange, mutate, summarize, and group_by. In you blog post demonstrate that you understand and can use each of these functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n✔ tibble  3.1.8     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget <- read_csv(\"budget.csv\", show_col_types = FALSE)\n```\n:::\n\n\n### Select\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select single column by name\nproduct_dat1 <- budget %>% \n  select(product) \n\n# select single column by number\nproduct_dat2 <- budget %>% \n  select(1) \n\n# select multiple columns by number\nproduct_dat3 <- budget %>% \n  select(2,3) \n\n# print these selections\nbudget %>% select(1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  region\n  <chr> \n1 North \n2 North \n3 South \n4 South \n5 East  \n6 East  \n7 West  \n8 West  \n```\n:::\n\n```{.r .cell-code}\nbudget %>% select(2,3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n```\n:::\n\n```{.r .cell-code}\nproduct_dat1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  product\n  <chr>  \n1 widgets\n2 gadgets\n3 widgets\n4 gadgets\n5 widgets\n6 gadgets\n7 widgets\n8 gadgets\n```\n:::\n\n```{.r .cell-code}\n(product_dat4 <- budget %>% select(expenses_2019))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  expenses_2019\n          <dbl>\n1           822\n2          1037\n3          1004\n4          -610\n5          -801\n6            94\n7           783\n8           433\n```\n:::\n:::\n\n\n### Colon Notation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n\n# select columns with colon\n(sales2019 <- budget %>% select(region:sales_2019))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 3\n  region product sales_2019\n  <chr>  <chr>        <dbl>\n1 North  widgets       2129\n2 North  gadgets        723\n3 South  widgets       1123\n4 South  gadgets       2022\n5 East   widgets       -728\n6 East   gadgets       -423\n7 West   widgets        633\n8 West   gadgets       1204\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}